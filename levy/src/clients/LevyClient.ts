/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { type AlgorandClient } from '@algorandfoundation/algokit-utils/types/algorand-client'
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue, getABIStructFromABITuple } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient as _AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
  ResolveAppClientByNetwork,
  CloneAppClientParams,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory as _AppFactory, AppFactoryAppClientParams, AppFactoryResolveAppClientByCreatorAndNameParams, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import { TransactionComposer, AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions, RawSimulateOptions, SkipSignaturesSimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { SendParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { Address, encodeAddress, modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'

export const APP_SPEC: Arc56Contract = {"name":"Levy","structs":{"UserLeverageBoxName":[{"name":"user","type":"address"},{"name":"asset","type":"uint64"}],"UserLeverageBoxValue":[{"name":"algoDeposit","type":"uint64"},{"name":"assetAmount","type":"uint64"},{"name":"assetDecimals","type":"uint64"},{"name":"leverage","type":"uint8"}]},"methods":[{"name":"opt_into_asset","args":[{"type":"uint64","name":"asset"},{"type":"pay","name":"mbr_payment"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"create_position","args":[{"type":"pay","name":"algo_deposit"},{"type":"uint8","name":"leverage"},{"type":"uint64","name":"asset"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"no_current_positions_for_this_asset","args":[{"type":"(address,uint64)","struct":"UserLeverageBoxName","name":"user_box_name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"check_position","args":[{"type":"(address,uint64)","struct":"UserLeverageBoxName","name":"user_box_name"}],"returns":{"type":"(bool,uint64,uint64,uint64,uint64)"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}},{"name":"liquidate","args":[{"type":"(address,uint64)","struct":"UserLeverageBoxName","name":"user_box_name"}],"returns":{"type":"void"},"actions":{"create":[],"call":["NoOp"]},"readonly":false,"events":[],"recommendations":{}}],"arcs":[22,28],"networks":{},"state":{"schema":{"global":{"ints":4,"bytes":1},"local":{"ints":0,"bytes":0}},"keys":{"global":{"tinyman_router":{"keyType":"AVMString","valueType":"AVMUint64","key":"dGlueW1hbl9yb3V0ZXI="},"pool_logicsig_template":{"keyType":"AVMString","valueType":"AVMBytes","key":"cG9vbF9sb2dpY3NpZ190ZW1wbGF0ZQ=="},"liquidation_threshold":{"keyType":"AVMString","valueType":"AVMUint64","key":"bGlxdWlkYXRpb25fdGhyZXNob2xk"},"scaled_base_percentage":{"keyType":"AVMString","valueType":"AVMUint64","key":"c2NhbGVkX2Jhc2VfcGVyY2VudGFnZQ=="},"fee":{"keyType":"AVMString","valueType":"AVMUint64","key":"ZmVl"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{"user_leveraged_positions":{"keyType":"UserLeverageBoxName","valueType":"UserLeverageBoxValue","prefix":""}}}},"bareActions":{"create":["NoOp"],"call":[]},"sourceInfo":{"approval":{"sourceInfo":[{"pc":[379],"errorMessage":"Minimum 1 Algo Deposit"},{"pc":[232],"errorMessage":"OnCompletion must be NoOp"},{"pc":[286],"errorMessage":"OnCompletion must be NoOp && can only call when creating"},{"pc":[483],"errorMessage":"asset exists"},{"pc":[841],"errorMessage":"check self.fee exists"},{"pc":[643],"errorMessage":"check self.liquidation_threshold exists"},{"pc":[895],"errorMessage":"check self.pool_logicsig_template exists"},{"pc":[637],"errorMessage":"check self.scaled_base_percentage exists"},{"pc":[394,554,726,928],"errorMessage":"check self.tinyman_router exists"},{"pc":[516,705],"errorMessage":"check self.user_leveraged_positions entry exists"},{"pc":[301,354],"errorMessage":"transaction type is pay"}],"pcOffsetMethod":"none"},"clear":{"sourceInfo":[],"pcOffsetMethod":"none"}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"},"byteCode":{"approval":"CyAEAAEIBCYIDnRpbnltYW5fcm91dGVyCAAAAAAAAAAABHN3YXALZml4ZWQtaW5wdXQWcG9vbF9sb2dpY3NpZ190ZW1wbGF0ZRVsaXF1aWRhdGlvbl90aHJlc2hvbGQWc2NhbGVkX2Jhc2VfcGVyY2VudGFnZQNmZWUxGEAAYSiBmKDuRmeAQEJvQVlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWdRQmJOUUEwQURFWUVrUXhHWUVCRWtTQkFVTT1eAScETGcnBYHYNmcnBoGQTmcnB4HoB2cxG0EAMjEZFEQxGESCBQQmUFzuBHAFIVYE5gzqqASRuo+eBHANyfM2GgCOBQAJAEMA2wDjAZwAMRkUMRgUEEM2GgEXSTEWIwlJOBAjEkRJOAiBoI0GEkQ4BzIKEkQyCkxwAEUBQAAQsTIKSwGyEbIUJbIQIrIBsyNDMRYjCUk4ECMSRDYaATYaAksCOAcyChJETwI4CEmBwIQ9D0RLAhdLAQtLAogB8SIoZURLBBexTwOyCEsCsgcjshAisgG2SbIwTwKyHCqyGiuyGimyGiKyGUyyGIEGshAisgGztToFSRUkSwEPJEsCTwJNSwFMCUxSMQBPBFBJvUUBFERPAxZPA3EBRBZMTwNQTFBPAlC/I0M2GgG9RQEUQzYaATEAMgkSREm+REkiW0lOA04DSYEYVUlOA04ESwFXIAiIAVpPAoEgW08CJFsiKGVEsUsDshRMshJLAbIRJbIQIrIBtkyyMEyyHCqyGiuyGimyGiKyGbIYgQayECKyAbO1OgVJFSRLAQ8kSwJPAk1LAUwJTFIXSU4DTgILSU8CIicGZUQLIicFZURPAgsOQQAjI4ABACJPAlRLAhZQSwQWUEsBFlBLAxZQgAQVH3x1TFCwI0MiQv/agABJNhoBSTEAMgkSREm+REsBVyAIiACuTwKBIFtLAiRbIihlRLFLA7IUTLISSwGyESWyECKyAbZMsjBMshwqshorshopshoishmyGIEGshAisgGztToFSRUkSwEPJEsCTwJNSwFMCUxSF0lOAksBIltPAoEYVUsBC0lOA0sBCU4CDEEABksDvEgjQ0sCSwEJSUUGIicHZURLAwuBkE4KSUUIDEEAB0sDvEhC/9yxSwNXACBLBUsHCbIIsgcjshAisgGzQv/DigEBIicEZURJFSJLAQ8iSwJPAk2BA0sCD4EDSwNPAk1LA04CUiIoZUQWUIv/UClQgRtLAg+BG0sDTwJNTwNMTwNSUIAHUHJvZ3JhbUxQA4k=","clear":"C4EBQw=="},"events":[],"templateVariables":{}} as unknown as Arc56Contract

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Type definitions for ARC-56 structs

export type UserLeverageBoxName = {
  user: string,
  asset: bigint
}


/**
 * Converts the ABI tuple representation of a UserLeverageBoxName to the struct representation
 */
export function UserLeverageBoxNameFromTuple(abiTuple: [string, bigint]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserLeverageBoxName, APP_SPEC.structs) as UserLeverageBoxName
}

export type UserLeverageBoxValue = {
  algoDeposit: bigint,
  assetAmount: bigint,
  assetDecimals: bigint,
  leverage: number
}


/**
 * Converts the ABI tuple representation of a UserLeverageBoxValue to the struct representation
 */
export function UserLeverageBoxValueFromTuple(abiTuple: [bigint, bigint, bigint, number]) {
  return getABIStructFromABITuple(abiTuple, APP_SPEC.structs.UserLeverageBoxValue, APP_SPEC.structs) as UserLeverageBoxValue
}

/**
 * The argument types for the Levy contract
 */
export type LevyArgs = {
  /**
   * The object representation of the arguments for each method
   */
  obj: {
    'opt_into_asset(uint64,pay)void': {
      asset: bigint | number
      mbrPayment: AppMethodCallTransactionArgument
    }
    'create_position(pay,uint8,uint64)void': {
      algoDeposit: AppMethodCallTransactionArgument
      leverage: bigint | number
      asset: bigint | number
    }
    'no_current_positions_for_this_asset((address,uint64))void': {
      userBoxName: UserLeverageBoxName
    }
    'check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)': {
      userBoxName: UserLeverageBoxName
    }
    'liquidate((address,uint64))void': {
      userBoxName: UserLeverageBoxName
    }
  }
  /**
   * The tuple representation of the arguments for each method
   */
  tuple: {
    'opt_into_asset(uint64,pay)void': [asset: bigint | number, mbrPayment: AppMethodCallTransactionArgument]
    'create_position(pay,uint8,uint64)void': [algoDeposit: AppMethodCallTransactionArgument, leverage: bigint | number, asset: bigint | number]
    'no_current_positions_for_this_asset((address,uint64))void': [userBoxName: UserLeverageBoxName]
    'check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)': [userBoxName: UserLeverageBoxName]
    'liquidate((address,uint64))void': [userBoxName: UserLeverageBoxName]
  }
}

/**
 * The return type for each method
 */
export type LevyReturns = {
  'opt_into_asset(uint64,pay)void': void
  'create_position(pay,uint8,uint64)void': void
  'no_current_positions_for_this_asset((address,uint64))void': void
  'check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)': [boolean, bigint, bigint, bigint, bigint]
  'liquidate((address,uint64))void': void
}

/**
 * Defines the types of available calls and state of the Levy smart contract.
 */
export type LevyTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'opt_into_asset(uint64,pay)void' | 'opt_into_asset', {
      argsObj: LevyArgs['obj']['opt_into_asset(uint64,pay)void']
      argsTuple: LevyArgs['tuple']['opt_into_asset(uint64,pay)void']
      returns: LevyReturns['opt_into_asset(uint64,pay)void']
    }>
    & Record<'create_position(pay,uint8,uint64)void' | 'create_position', {
      argsObj: LevyArgs['obj']['create_position(pay,uint8,uint64)void']
      argsTuple: LevyArgs['tuple']['create_position(pay,uint8,uint64)void']
      returns: LevyReturns['create_position(pay,uint8,uint64)void']
    }>
    & Record<'no_current_positions_for_this_asset((address,uint64))void' | 'no_current_positions_for_this_asset', {
      argsObj: LevyArgs['obj']['no_current_positions_for_this_asset((address,uint64))void']
      argsTuple: LevyArgs['tuple']['no_current_positions_for_this_asset((address,uint64))void']
      returns: LevyReturns['no_current_positions_for_this_asset((address,uint64))void']
    }>
    & Record<'check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)' | 'check_position', {
      argsObj: LevyArgs['obj']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)']
      argsTuple: LevyArgs['tuple']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)']
      returns: LevyReturns['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)']
    }>
    & Record<'liquidate((address,uint64))void' | 'liquidate', {
      argsObj: LevyArgs['obj']['liquidate((address,uint64))void']
      argsTuple: LevyArgs['tuple']['liquidate((address,uint64))void']
      returns: LevyReturns['liquidate((address,uint64))void']
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        tinymanRouter: bigint
        poolLogicsigTemplate: BinaryState
        liquidationThreshold: bigint
        scaledBasePercentage: bigint
        fee: bigint
      }
      maps: {}
    }
    box: {
      keys: {}
      maps: {
        userLeveragedPositions: Map<UserLeverageBoxName, UserLeverageBoxValue>
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type LevySignatures = keyof LevyTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type LevyNonVoidMethodSignatures = keyof LevyTypes['methods'] extends infer T ? T extends keyof LevyTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TArgs> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<TArgs>
    }
>
/**
 * Maps a method signature from the Levy smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends LevySignatures> = LevyTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Levy smart contract to the method's return type
 */
export type MethodReturn<TSignature extends LevySignatures> = LevyTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = LevyTypes['state']['global']['keys']

/**
 * Defines the shape of the keyed box state of the application.
 */
export type BoxKeysState = LevyTypes['state']['box']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type LevyCreateCallParams =
  | Expand<AppClientBareCallParams & {method?: never} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines arguments required for the deploy method.
 */
export type LevyDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: LevyCreateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the Levy smart contract
 */
export abstract class LevyParamsFactory {
  /**
   * Constructs a no op call for the opt_into_asset(uint64,pay)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static optIntoAsset(params: CallParams<LevyArgs['obj']['opt_into_asset(uint64,pay)void'] | LevyArgs['tuple']['opt_into_asset(uint64,pay)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'opt_into_asset(uint64,pay)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asset, params.args.mbrPayment],
    }
  }
  /**
   * Constructs a no op call for the create_position(pay,uint8,uint64)void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createPosition(params: CallParams<LevyArgs['obj']['create_position(pay,uint8,uint64)void'] | LevyArgs['tuple']['create_position(pay,uint8,uint64)void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'create_position(pay,uint8,uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.algoDeposit, params.args.leverage, params.args.asset],
    }
  }
  /**
   * Constructs a no op call for the no_current_positions_for_this_asset((address,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static noCurrentPositionsForThisAsset(params: CallParams<LevyArgs['obj']['no_current_positions_for_this_asset((address,uint64))void'] | LevyArgs['tuple']['no_current_positions_for_this_asset((address,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'no_current_positions_for_this_asset((address,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userBoxName],
    }
  }
  /**
   * Constructs a no op call for the check_position((address,uint64))(bool,uint64,uint64,uint64,uint64) ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static checkPosition(params: CallParams<LevyArgs['obj']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)'] | LevyArgs['tuple']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userBoxName],
    }
  }
  /**
   * Constructs a no op call for the liquidate((address,uint64))void ABI method
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static liquidate(params: CallParams<LevyArgs['obj']['liquidate((address,uint64))void'] | LevyArgs['tuple']['liquidate((address,uint64))void']> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'liquidate((address,uint64))void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.userBoxName],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the Levy smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class LevyFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: _AppFactory

  /**
   * Creates a new instance of `LevyFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Omit<AppFactoryParams, 'appSpec'>) {
    this.appFactory = new _AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /** The name of the app (from the ARC-32 / ARC-56 app spec or override). */
  public get appName() {
    return this.appFactory.appName
  }
  
  /** The ARC-56 app spec being used */
  get appSpec() {
    return APP_SPEC
  }
  
  /** A reference to the underlying `AlgorandClient` this app factory is using. */
  public get algorand(): AlgorandClient {
    return this.appFactory.algorand
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: AppFactoryAppClientParams) {
    return new LevyClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAndName(
    params: AppFactoryResolveAppClientByCreatorAndNameParams,
  ) {
    return new LevyClient(await this.appFactory.getAppClientByCreatorAndName(params))
  }

  /**
   * Idempotently deploys the Levy smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: LevyDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
    })
    return { result: result.result, appClient: new LevyClient(result.appClient) }
  }

  /**
   * Get parameters to create transactions (create and deploy related calls) for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Levy smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The params for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.params.bare.create(params)
      },
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Levy smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The transaction for a create call
       */
      bare: (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        return this.appFactory.createTransaction.bare.create(params)
      },
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Gets available create methods
     */
    create: {
      /**
       * Creates a new instance of the Levy smart contract using a bare call.
       *
       * @param params The params for the bare (raw) call
       * @returns The create result
       */
      bare: async (params?: Expand<AppClientBareCallParams & AppClientCompilationParams & CreateSchema & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}>) => {
        const result = await this.appFactory.send.bare.create(params)
        return { result: result.result, appClient: new LevyClient(result.appClient) }
      },
    },

  }

}
/**
 * A client to make calls to the Levy smart contract
 */
export class LevyClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: _AppClient

  /**
   * Creates a new instance of `LevyClient`
   *
   * @param appClient An `AppClient` instance which has been created with the Levy app spec
   */
  constructor(appClient: _AppClient)
  /**
   * Creates a new instance of `LevyClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Omit<AppClientParams, 'appSpec'>)
  constructor(appClientOrParams: _AppClient | Omit<AppClientParams, 'appSpec'>) {
    this.appClient = appClientOrParams instanceof _AppClient ? appClientOrParams : new _AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends LevyNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `LevyClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Omit<ResolveAppClientByCreatorAndName, 'appSpec'>): Promise<LevyClient> {
    return new LevyClient(await _AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `LevyClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Omit<ResolveAppClientByNetwork, 'appSpec'>
  ): Promise<LevyClient> {
    return new LevyClient(await _AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }
  
  /** The ID of the app instance this client is linked to. */
  public get appId() {
    return this.appClient.appId
  }
  
  /** The app address of the app instance this client is linked to. */
  public get appAddress() {
    return this.appClient.appAddress
  }
  
  /** The name of the app. */
  public get appName() {
    return this.appClient.appName
  }
  
  /** The ARC-56 app spec being used */
  public get appSpec() {
    return this.appClient.appSpec
  }
  
  /** A reference to the underlying `AlgorandClient` this app client is using. */
  public get algorand(): AlgorandClient {
    return this.appClient.algorand
  }

  /**
   * Get parameters to create transactions for the current app. A good mental model for this is that these parameters represent a deferred transaction creation.
   */
  readonly params = {
    /**
     * Makes a clear_state call to an existing instance of the Levy smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.params.bare.clearState(params)
    },

    /**
     * Makes a call to the Levy smart contract using the `opt_into_asset(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    optIntoAsset: (params: CallParams<LevyArgs['obj']['opt_into_asset(uint64,pay)void'] | LevyArgs['tuple']['opt_into_asset(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LevyParamsFactory.optIntoAsset(params))
    },

    /**
     * Makes a call to the Levy smart contract using the `create_position(pay,uint8,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    createPosition: (params: CallParams<LevyArgs['obj']['create_position(pay,uint8,uint64)void'] | LevyArgs['tuple']['create_position(pay,uint8,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LevyParamsFactory.createPosition(params))
    },

    /**
     * Makes a call to the Levy smart contract using the `no_current_positions_for_this_asset((address,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    noCurrentPositionsForThisAsset: (params: CallParams<LevyArgs['obj']['no_current_positions_for_this_asset((address,uint64))void'] | LevyArgs['tuple']['no_current_positions_for_this_asset((address,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LevyParamsFactory.noCurrentPositionsForThisAsset(params))
    },

    /**
     * Makes a call to the Levy smart contract using the `check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    checkPosition: (params: CallParams<LevyArgs['obj']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)'] | LevyArgs['tuple']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LevyParamsFactory.checkPosition(params))
    },

    /**
     * Makes a call to the Levy smart contract using the `liquidate((address,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call params
     */
    liquidate: (params: CallParams<LevyArgs['obj']['liquidate((address,uint64))void'] | LevyArgs['tuple']['liquidate((address,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.params.call(LevyParamsFactory.liquidate(params))
    },

  }

  /**
   * Create transactions for the current app
   */
  readonly createTransaction = {
    /**
     * Makes a clear_state call to an existing instance of the Levy smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams>) => {
      return this.appClient.createTransaction.bare.clearState(params)
    },

    /**
     * Makes a call to the Levy smart contract using the `opt_into_asset(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    optIntoAsset: (params: CallParams<LevyArgs['obj']['opt_into_asset(uint64,pay)void'] | LevyArgs['tuple']['opt_into_asset(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LevyParamsFactory.optIntoAsset(params))
    },

    /**
     * Makes a call to the Levy smart contract using the `create_position(pay,uint8,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    createPosition: (params: CallParams<LevyArgs['obj']['create_position(pay,uint8,uint64)void'] | LevyArgs['tuple']['create_position(pay,uint8,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LevyParamsFactory.createPosition(params))
    },

    /**
     * Makes a call to the Levy smart contract using the `no_current_positions_for_this_asset((address,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    noCurrentPositionsForThisAsset: (params: CallParams<LevyArgs['obj']['no_current_positions_for_this_asset((address,uint64))void'] | LevyArgs['tuple']['no_current_positions_for_this_asset((address,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LevyParamsFactory.noCurrentPositionsForThisAsset(params))
    },

    /**
     * Makes a call to the Levy smart contract using the `check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    checkPosition: (params: CallParams<LevyArgs['obj']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)'] | LevyArgs['tuple']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LevyParamsFactory.checkPosition(params))
    },

    /**
     * Makes a call to the Levy smart contract using the `liquidate((address,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call transaction
     */
    liquidate: (params: CallParams<LevyArgs['obj']['liquidate((address,uint64))void'] | LevyArgs['tuple']['liquidate((address,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      return this.appClient.createTransaction.call(LevyParamsFactory.liquidate(params))
    },

  }

  /**
   * Send calls to the current app
   */
  readonly send = {
    /**
     * Makes a clear_state call to an existing instance of the Levy smart contract.
     *
     * @param params The params for the bare (raw) call
     * @returns The clearState result
     */
    clearState: (params?: Expand<AppClientBareCallParams & SendParams>) => {
      return this.appClient.send.bare.clearState(params)
    },

    /**
     * Makes a call to the Levy smart contract using the `opt_into_asset(uint64,pay)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    optIntoAsset: async (params: CallParams<LevyArgs['obj']['opt_into_asset(uint64,pay)void'] | LevyArgs['tuple']['opt_into_asset(uint64,pay)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LevyParamsFactory.optIntoAsset(params))
      return {...result, return: result.return as unknown as (undefined | LevyReturns['opt_into_asset(uint64,pay)void'])}
    },

    /**
     * Makes a call to the Levy smart contract using the `create_position(pay,uint8,uint64)void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    createPosition: async (params: CallParams<LevyArgs['obj']['create_position(pay,uint8,uint64)void'] | LevyArgs['tuple']['create_position(pay,uint8,uint64)void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LevyParamsFactory.createPosition(params))
      return {...result, return: result.return as unknown as (undefined | LevyReturns['create_position(pay,uint8,uint64)void'])}
    },

    /**
     * Makes a call to the Levy smart contract using the `no_current_positions_for_this_asset((address,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    noCurrentPositionsForThisAsset: async (params: CallParams<LevyArgs['obj']['no_current_positions_for_this_asset((address,uint64))void'] | LevyArgs['tuple']['no_current_positions_for_this_asset((address,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LevyParamsFactory.noCurrentPositionsForThisAsset(params))
      return {...result, return: result.return as unknown as (undefined | LevyReturns['no_current_positions_for_this_asset((address,uint64))void'])}
    },

    /**
     * Makes a call to the Levy smart contract using the `check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    checkPosition: async (params: CallParams<LevyArgs['obj']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)'] | LevyArgs['tuple']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LevyParamsFactory.checkPosition(params))
      return {...result, return: result.return as unknown as (undefined | LevyReturns['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)'])}
    },

    /**
     * Makes a call to the Levy smart contract using the `liquidate((address,uint64))void` ABI method.
     *
     * @param params The params for the smart contract call
     * @returns The call result
     */
    liquidate: async (params: CallParams<LevyArgs['obj']['liquidate((address,uint64))void'] | LevyArgs['tuple']['liquidate((address,uint64))void']> & SendParams & {onComplete?: OnApplicationComplete.NoOpOC}) => {
      const result = await this.appClient.send.call(LevyParamsFactory.liquidate(params))
      return {...result, return: result.return as unknown as (undefined | LevyReturns['liquidate((address,uint64))void'])}
    },

  }

  /**
   * Clone this app client with different params
   *
   * @param params The params to use for the the cloned app client. Omit a param to keep the original value. Set a param to override the original value. Setting to undefined will clear the original value.
   * @returns A new app client with the altered params
   */
  public clone(params: CloneAppClientParams) {
    return new LevyClient(this.appClient.clone(params))
  }

  /**
   * Methods to access state for the current Levy app
   */
  state = {
    /**
     * Methods to access global state for the current Levy app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          tinymanRouter: result.tinyman_router,
          poolLogicsigTemplate: new BinaryStateValue(result.pool_logicsig_template),
          liquidationThreshold: result.liquidation_threshold,
          scaledBasePercentage: result.scaled_base_percentage,
          fee: result.fee,
        }
      },
      /**
       * Get the current value of the tinyman_router key in global state
       */
      tinymanRouter: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("tinyman_router")) as bigint | undefined },
      /**
       * Get the current value of the pool_logicsig_template key in global state
       */
      poolLogicsigTemplate: async (): Promise<BinaryState> => { return new BinaryStateValue((await this.appClient.state.global.getValue("pool_logicsig_template")) as Uint8Array | undefined) },
      /**
       * Get the current value of the liquidation_threshold key in global state
       */
      liquidationThreshold: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("liquidation_threshold")) as bigint | undefined },
      /**
       * Get the current value of the scaled_base_percentage key in global state
       */
      scaledBasePercentage: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("scaled_base_percentage")) as bigint | undefined },
      /**
       * Get the current value of the fee key in global state
       */
      fee: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("fee")) as bigint | undefined },
    },
    /**
     * Methods to access box state for the current Levy app
     */
    box: {
      /**
       * Get all current keyed values from box state
       */
      getAll: async (): Promise<Partial<Expand<BoxKeysState>>> => {
        const result = await this.appClient.state.box.getAll()
        return {
        }
      },
      /**
       * Get values from the user_leveraged_positions map in box state
       */
      userLeveragedPositions: {
        /**
         * Get all current values of the user_leveraged_positions map in box state
         */
        getMap: async (): Promise<Map<UserLeverageBoxName, UserLeverageBoxValue>> => { return (await this.appClient.state.box.getMap("user_leveraged_positions")) as Map<UserLeverageBoxName, UserLeverageBoxValue> },
        /**
         * Get a current value of the user_leveraged_positions map by key from box state
         */
        value: async (key: UserLeverageBoxName): Promise<UserLeverageBoxValue | undefined> => { return await this.appClient.state.box.getMapValue("user_leveraged_positions", key) as UserLeverageBoxValue | undefined },
      },
    },
  }

  public newGroup(): LevyComposer {
    const client = this
    const composer = this.algorand.newGroup()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a opt_into_asset(uint64,pay)void method call against the Levy contract
       */
      optIntoAsset(params: CallParams<LevyArgs['obj']['opt_into_asset(uint64,pay)void'] | LevyArgs['tuple']['opt_into_asset(uint64,pay)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.optIntoAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a create_position(pay,uint8,uint64)void method call against the Levy contract
       */
      createPosition(params: CallParams<LevyArgs['obj']['create_position(pay,uint8,uint64)void'] | LevyArgs['tuple']['create_position(pay,uint8,uint64)void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.createPosition(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a no_current_positions_for_this_asset((address,uint64))void method call against the Levy contract
       */
      noCurrentPositionsForThisAsset(params: CallParams<LevyArgs['obj']['no_current_positions_for_this_asset((address,uint64))void'] | LevyArgs['tuple']['no_current_positions_for_this_asset((address,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.noCurrentPositionsForThisAsset(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a check_position((address,uint64))(bool,uint64,uint64,uint64,uint64) method call against the Levy contract
       */
      checkPosition(params: CallParams<LevyArgs['obj']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)'] | LevyArgs['tuple']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.checkPosition(params)))
        resultMappers.push((v) => client.decodeReturnValue('check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)', v))
        return this
      },
      /**
       * Add a liquidate((address,uint64))void method call against the Levy contract
       */
      liquidate(params: CallParams<LevyArgs['obj']['liquidate((address,uint64))void'] | LevyArgs['tuple']['liquidate((address,uint64))void']> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        promiseChain = promiseChain.then(async () => composer.addAppCallMethodCall(await client.params.liquidate(params)))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the Levy contract
       */
      clearState(params: AppClientBareCallParams) {
        promiseChain = promiseChain.then(() => composer.addAppCall(client.params.clearState(params)))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        promiseChain = promiseChain.then(() => composer.addTransaction(txn, signer))
        return this
      },
      async composer() {
        await promiseChain
        return composer
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await (!options ? composer.simulate() : composer.simulate(options))
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async send(params?: SendParams) {
        await promiseChain
        const result = await composer.send(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as LevyComposer
  }
}
export type LevyComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the opt_into_asset(uint64,pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIntoAsset(params?: CallParams<LevyArgs['obj']['opt_into_asset(uint64,pay)void'] | LevyArgs['tuple']['opt_into_asset(uint64,pay)void']>): LevyComposer<[...TReturns, LevyReturns['opt_into_asset(uint64,pay)void'] | undefined]>

  /**
   * Calls the create_position(pay,uint8,uint64)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createPosition(params?: CallParams<LevyArgs['obj']['create_position(pay,uint8,uint64)void'] | LevyArgs['tuple']['create_position(pay,uint8,uint64)void']>): LevyComposer<[...TReturns, LevyReturns['create_position(pay,uint8,uint64)void'] | undefined]>

  /**
   * Calls the no_current_positions_for_this_asset((address,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  noCurrentPositionsForThisAsset(params?: CallParams<LevyArgs['obj']['no_current_positions_for_this_asset((address,uint64))void'] | LevyArgs['tuple']['no_current_positions_for_this_asset((address,uint64))void']>): LevyComposer<[...TReturns, LevyReturns['no_current_positions_for_this_asset((address,uint64))void'] | undefined]>

  /**
   * Calls the check_position((address,uint64))(bool,uint64,uint64,uint64,uint64) ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  checkPosition(params?: CallParams<LevyArgs['obj']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)'] | LevyArgs['tuple']['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)']>): LevyComposer<[...TReturns, LevyReturns['check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)'] | undefined]>

  /**
   * Calls the liquidate((address,uint64))void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  liquidate(params?: CallParams<LevyArgs['obj']['liquidate((address,uint64))void'] | LevyArgs['tuple']['liquidate((address,uint64))void']>): LevyComposer<[...TReturns, LevyReturns['liquidate((address,uint64))void'] | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the Levy smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): LevyComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): LevyComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): Promise<TransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(): Promise<LevyComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: SkipSignaturesSimulateOptions): Promise<LevyComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  simulate(options: RawSimulateOptions): Promise<LevyComposerResults<TReturns> & { simulateResponse: modelsv2.SimulateResponse }>
  /**
   * Sends the transaction group to the network and returns the results
   */
  send(params?: SendParams): Promise<LevyComposerResults<TReturns>>
}
export type LevyComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

