# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asset"}, {"type": "pay", "name": "mbr_payment"}], "name": "opt_into_asset", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "algo_deposit"}, {"type": "uint8", "name": "leverage"}, {"type": "uint64", "name": "asset"}], "name": "create_position", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(address,uint64)", "name": "user_box_name", "struct": "UserLeverageBoxName"}], "name": "check_position", "returns": {"type": "(bool,uint64,uint64,uint64,uint64)"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(address,uint64)", "name": "user_box_name", "struct": "UserLeverageBoxName"}], "name": "liquidate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Levy", "state": {"keys": {"box": {}, "global": {"tinyman_router": {"key": "dGlueW1hbl9yb3V0ZXI=", "keyType": "AVMString", "valueType": "AVMUint64"}, "pool_logicsig_template": {"key": "cG9vbF9sb2dpY3NpZ190ZW1wbGF0ZQ==", "keyType": "AVMString", "valueType": "AVMBytes"}, "liquidation_threshold": {"key": "bGlxdWlkYXRpb25fdGhyZXNob2xk", "keyType": "AVMString", "valueType": "AVMUint64"}, "scaled_base_percentage": {"key": "c2NhbGVkX2Jhc2VfcGVyY2VudGFnZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "fee": {"key": "ZmVl", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"user_leveraged_positions": {"keyType": "UserLeverageBoxName", "valueType": "UserLeverageBoxValue", "prefix": ""}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 4}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"UserLeverageBoxName": [{"name": "user", "type": "address"}, {"name": "asset", "type": "uint64"}], "UserLeverageBoxValue": [{"name": "algo_deposit", "type": "uint64"}, {"name": "asset_amount", "type": "uint64"}, {"name": "leverage", "type": "uint8"}]}, "byteCode": {"approval": "CyAEAAEIBCYIDnRpbnltYW5fcm91dGVyCAAAAAAAAAAABHN3YXALZml4ZWQtaW5wdXQWcG9vbF9sb2dpY3NpZ190ZW1wbGF0ZRVsaXF1aWRhdGlvbl90aHJlc2hvbGQWc2NhbGVkX2Jhc2VfcGVyY2VudGFnZQNmZWUxGEAAYSiBmKDuRmeAQEJvQVlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWdRQmJOUUEwQURFWUVrUXhHWUVCRWtTQkFVTT1eAScETGcnBYHYNmcnBoGQTmcnB4HoB2cxG0EAKzEZFEQxGESCBAQmUFzuBHAFIVYEkbqPngRwDcnzNhoAjgQACQBDAMkBggAxGRQxGBQQQzYaARdJMRYjCUk4ECMSREk4CIGgjQYSRDgHMgoSRDIKTHAARQFAABCxMgpLAbIRshQlshAisgGzI0MxFiMJSTgQIxJENhoBNhoCSwI4BzIKEkRPAjgISYHAhD0PREsCF0sBC0sCiAHXIihlREsEF7FPA7IISwKyByOyECKyAbayMEyyHCqyGiuyGimyGiKyGbIYgQayECKyAbO1OgVJFSRLAQ8kSwJPAk1LAUwJTFIxAE8DUE8CFk8CUE8CUL8jQzYaATEAMgkSREm+REkiW0lOA04DSYEQVUlOA04ESwFXIAiIAVpPAoEgW08CJFsiKGVEsUsDshRMshJLAbIRJbIQIrIBtkyyMEyyHCqyGiuyGimyGiKyGbIYgQayECKyAbO1OgVJFSRLAQ8kSwJPAk1LAUwJTFIXSU4DTgILSU8CIicGZUQLIicFZURPAgsOQQAjI4ABACJPAlRLAhZQSwQWUEsBFlBLAxZQgAQVH3x1TFCwI0MiQv/agABJNhoBSTEAMgkSREm+REsBVyAIiACuTwKBIFtLAiRbIihlRLFLA7IUTLISSwGyESWyECKyAbZMsjBMshwqshorshopshoishmyGIEGshAisgGztToFSRUkSwEPJEsCTwJNSwFMCUxSF0lOAksBIltPAoEQVUsBC0lOA0sBCU4CDEEABksDvEgjQ0sCSwEJSUUGIicHZURLAwuBkE4KSUUIDEEAB0sDvEhC/9yxSwNXACBLBUsHCbIIsgcjshAisgGzQv/DigEBIicEZURJFSJLAQ8iSwJPAk2BA0sCD4EDSwNPAk1LA04CUiIoZUQWUIv/UClQgRtLAg+BG0sDTwJNTwNMTwNSUIAHUHJvZ3JhbUxQA4k=", "clear": "C4EBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 5, "minor": 0, "patch": 1}}, "events": [], "networks": {}, "source": {"approval": "", "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [372], "errorMessage": "Minimum 1 Algo Deposit"}, {"pc": [232], "errorMessage": "OnCompletion must be NoOp"}, {"pc": [279], "errorMessage": "OnCompletion must be NoOp && can only call when creating"}, {"pc": [808], "errorMessage": "check self.fee exists"}, {"pc": [610], "errorMessage": "check self.liquidation_threshold exists"}, {"pc": [862], "errorMessage": "check self.pool_logicsig_template exists"}, {"pc": [604], "errorMessage": "check self.scaled_base_percentage exists"}, {"pc": [387, 521, 693, 895], "errorMessage": "check self.tinyman_router exists"}, {"pc": [483, 672], "errorMessage": "check self.user_leveraged_positions entry exists"}, {"pc": [294, 347], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class UserLeverageBoxName:
    """Struct for UserLeverageBoxName"""
    user: str
    asset: int

@dataclasses.dataclass(frozen=True)
class UserLeverageBoxValue:
    """Struct for UserLeverageBoxValue"""
    algo_deposit: int
    asset_amount: int
    leverage: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class OptIntoAssetArgs:
    """Dataclass for opt_into_asset arguments"""
    asset: int
    mbr_payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "opt_into_asset(uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreatePositionArgs:
    """Dataclass for create_position arguments"""
    algo_deposit: algokit_utils.AppMethodCallTransactionArgument
    leverage: int
    asset: int

    @property
    def abi_method_signature(self) -> str:
        return "create_position(pay,uint8,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CheckPositionArgs:
    """Dataclass for check_position arguments"""
    user_box_name: UserLeverageBoxName

    @property
    def abi_method_signature(self) -> str:
        return "check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class LiquidateArgs:
    """Dataclass for liquidate arguments"""
    user_box_name: UserLeverageBoxName

    @property
    def abi_method_signature(self) -> str:
        return "liquidate((address,uint64))void"


class LevyParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def opt_into_asset(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | OptIntoAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_into_asset(uint64,pay)void",
            "args": method_args,
        }))

    def create_position(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreatePositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_position(pay,uint8,uint64)void",
            "args": method_args,
        }))

    def check_position(
        self,
        args: tuple[UserLeverageBoxName] | CheckPositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def liquidate(
        self,
        args: tuple[UserLeverageBoxName] | LiquidateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "liquidate((address,uint64))void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class LevyCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def opt_into_asset(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | OptIntoAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_into_asset(uint64,pay)void",
            "args": method_args,
        }))

    def create_position(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreatePositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_position(pay,uint8,uint64)void",
            "args": method_args,
        }))

    def check_position(
        self,
        args: tuple[UserLeverageBoxName] | CheckPositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def liquidate(
        self,
        args: tuple[UserLeverageBoxName] | LiquidateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "liquidate((address,uint64))void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class LevySend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def opt_into_asset(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | OptIntoAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_into_asset(uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def create_position(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreatePositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_position(pay,uint8,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def check_position(
        self,
        args: tuple[UserLeverageBoxName] | CheckPositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[bool, int, int, int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[bool, int, int, int, int]], parsed_response)

    def liquidate(
        self,
        args: tuple[UserLeverageBoxName] | LiquidateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "liquidate((address,uint64))void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    tinyman_router: int
    pool_logicsig_template: bytes
    liquidation_threshold: int
    scaled_base_percentage: int
    fee: int

class LevyState:
    """Methods to access state for the current Levy app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def tinyman_router(self) -> int:
        """Get the current value of the tinyman_router key in global_state state"""
        value = self.app_client.state.global_state.get_value("tinyman_router")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def pool_logicsig_template(self) -> bytes:
        """Get the current value of the pool_logicsig_template key in global_state state"""
        value = self.app_client.state.global_state.get_value("pool_logicsig_template")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def liquidation_threshold(self) -> int:
        """Get the current value of the liquidation_threshold key in global_state state"""
        value = self.app_client.state.global_state.get_value("liquidation_threshold")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def scaled_base_percentage(self) -> int:
        """Get the current value of the scaled_base_percentage key in global_state state"""
        value = self.app_client.state.global_state.get_value("scaled_base_percentage")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def fee(self) -> int:
        """Get the current value of the fee key in global_state state"""
        value = self.app_client.state.global_state.get_value("fee")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "UserLeverageBoxValue": UserLeverageBoxValue
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def user_leveraged_positions(self) -> "_MapState[UserLeverageBoxName, UserLeverageBoxValue]":
        """Get values from the user_leveraged_positions map in box state"""
        return _MapState(
            self.app_client.state.box,
            "user_leveraged_positions",
            self._struct_classes.get("UserLeverageBoxValue")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class LevyClient:
    """Client for interacting with Levy smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = LevyParams(self.app_client)
        self.create_transaction = LevyCreateTransactionParams(self.app_client)
        self.send = LevySend(self.app_client)
        self.state = LevyState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "LevyClient":
        return LevyClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LevyClient":
        return LevyClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LevyClient":
        return LevyClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "LevyComposer":
        return LevyComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["opt_into_asset(uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_position(pay,uint8,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[bool, int, int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["liquidate((address,uint64))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | tuple[bool, int, int, int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class LevyBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating Levy contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class LevyFactory(algokit_utils.TypedAppFactoryProtocol[LevyBareCallCreateParams, None, None]):
    """Factory for deploying and managing LevyClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = LevyFactoryParams(self.app_factory)
        self.create_transaction = LevyFactoryCreateTransaction(self.app_factory)
        self.send = LevyFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: LevyBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[LevyClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return LevyClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LevyClient:
        """Get an app client by creator address and name"""
        return LevyClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LevyClient:
        """Get an app client by app ID"""
        return LevyClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class LevyFactoryParams:
    """Parameters for creating transactions for Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LevyFactoryCreateParams(app_factory)
        self.update = LevyFactoryUpdateParams(app_factory)
        self.delete = LevyFactoryDeleteParams(app_factory)

class LevyFactoryCreateParams:
    """Parameters for 'create' operations of Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def opt_into_asset(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | OptIntoAssetArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the opt_into_asset(uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "opt_into_asset(uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_position(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreatePositionArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_position(pay,uint8,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_position(pay,uint8,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def check_position(
        self,
        args: tuple[UserLeverageBoxName] | CheckPositionArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the check_position((address,uint64))(bool,uint64,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def liquidate(
        self,
        args: tuple[UserLeverageBoxName] | LiquidateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the liquidate((address,uint64))void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "liquidate((address,uint64))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class LevyFactoryUpdateParams:
    """Parameters for 'update' operations of Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class LevyFactoryDeleteParams:
    """Parameters for 'delete' operations of Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class LevyFactoryCreateTransaction:
    """Create transactions for Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LevyFactoryCreateTransactionCreate(app_factory)


class LevyFactoryCreateTransactionCreate:
    """Create new instances of Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class LevyFactorySend:
    """Send calls to Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LevyFactorySendCreate(app_factory)


class LevyFactorySendCreate:
    """Send create calls to Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[LevyClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return LevyClient(result[0]), result[1]


class LevyComposer:
    """Composer for creating transaction groups for Levy contract calls"""

    def __init__(self, client: "LevyClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def opt_into_asset(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | OptIntoAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LevyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.opt_into_asset(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "opt_into_asset(uint64,pay)void", v
            )
        )
        return self

    def create_position(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreatePositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LevyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_position(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_position(pay,uint8,uint64)void", v
            )
        )
        return self

    def check_position(
        self,
        args: tuple[UserLeverageBoxName] | CheckPositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LevyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.check_position(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)", v
            )
        )
        return self

    def liquidate(
        self,
        args: tuple[UserLeverageBoxName] | LiquidateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LevyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.liquidate(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "liquidate((address,uint64))void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "LevyComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "LevyComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
