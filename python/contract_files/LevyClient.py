# flake8: noqa
# fmt: off
# mypy: ignore-errors
# This file was automatically generated by algokit-client-generator.
# DO NOT MODIFY IT BY HAND.
# requires: algokit-utils@^3.0.0

# common
import dataclasses
import typing
# core algosdk
import algosdk
from algosdk.transaction import OnComplete
from algosdk.atomic_transaction_composer import TransactionSigner
from algosdk.source_map import SourceMap
from algosdk.transaction import Transaction
from algosdk.v2client.models import SimulateTraceConfig
# utils
import algokit_utils
from algokit_utils import AlgorandClient as _AlgoKitAlgorandClient

_APP_SPEC_JSON = r"""{"arcs": [22, 28], "bareActions": {"call": [], "create": ["NoOp"]}, "methods": [{"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "uint64", "name": "asset"}, {"type": "pay", "name": "mbr_payment"}], "name": "opt_into_asset", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "pay", "name": "algo_deposit"}, {"type": "uint8", "name": "leverage"}, {"type": "uint64", "name": "asset"}], "name": "create_position", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(address,uint64)", "name": "user_box_name", "struct": "UserLeverageBoxName"}], "name": "no_current_positions_for_this_asset", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(address,uint64)", "name": "user_box_name", "struct": "UserLeverageBoxName"}], "name": "check_position", "returns": {"type": "(bool,uint64,uint64,uint64,uint64)"}, "events": [], "readonly": false, "recommendations": {}}, {"actions": {"call": ["NoOp"], "create": []}, "args": [{"type": "(address,uint64)", "name": "user_box_name", "struct": "UserLeverageBoxName"}], "name": "liquidate", "returns": {"type": "void"}, "events": [], "readonly": false, "recommendations": {}}], "name": "Levy", "state": {"keys": {"box": {}, "global": {"tinyman_router": {"key": "dGlueW1hbl9yb3V0ZXI=", "keyType": "AVMString", "valueType": "AVMUint64"}, "pool_logicsig_template": {"key": "cG9vbF9sb2dpY3NpZ190ZW1wbGF0ZQ==", "keyType": "AVMString", "valueType": "AVMBytes"}, "liquidation_threshold": {"key": "bGlxdWlkYXRpb25fdGhyZXNob2xk", "keyType": "AVMString", "valueType": "AVMUint64"}, "scaled_base_percentage": {"key": "c2NhbGVkX2Jhc2VfcGVyY2VudGFnZQ==", "keyType": "AVMString", "valueType": "AVMUint64"}, "fee": {"key": "ZmVl", "keyType": "AVMString", "valueType": "AVMUint64"}}, "local": {}}, "maps": {"box": {"user_leveraged_positions": {"keyType": "UserLeverageBoxName", "valueType": "UserLeverageBoxValue", "prefix": ""}}, "global": {}, "local": {}}, "schema": {"global": {"bytes": 1, "ints": 4}, "local": {"bytes": 0, "ints": 0}}}, "structs": {"UserLeverageBoxName": [{"name": "user", "type": "address"}, {"name": "asset", "type": "uint64"}], "UserLeverageBoxValue": [{"name": "algo_deposit", "type": "uint64"}, {"name": "asset_amount", "type": "uint64"}, {"name": "asset_decimals", "type": "uint64"}, {"name": "leverage", "type": "uint8"}]}, "byteCode": {"approval": "CyAEAAEIBCYIDnRpbnltYW5fcm91dGVyCAAAAAAAAAAABHN3YXALZml4ZWQtaW5wdXQWcG9vbF9sb2dpY3NpZ190ZW1wbGF0ZRVsaXF1aWRhdGlvbl90aHJlc2hvbGQWc2NhbGVkX2Jhc2VfcGVyY2VudGFnZQNmZWUxGEAAYSiBmKDuRmeAQEJvQVlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWdRQmJOUUEwQURFWUVrUXhHWUVCRWtTQkFVTT1eAScETGcnBYHYNmcnBoGQTmcnB4HoB2cxG0EAMjEZFEQxGESCBQQmUFzuBHAFIVYE5gzqqASRuo+eBHANyfM2GgCOBQAJAEMA2wDjAZwAMRkUMRgUEEM2GgEXSTEWIwlJOBAjEkRJOAiBoI0GEkQ4BzIKEkQyCkxwAEUBQAAQsTIKSwGyEbIUJbIQIrIBsyNDMRYjCUk4ECMSRDYaATYaAksCOAcyChJETwI4CEmBwIQ9D0RLAhdLAQtLAogB8SIoZURLBBexTwOyCEsCsgcjshAisgG2SbIwTwKyHCqyGiuyGimyGiKyGUyyGIEGshAisgGztToFSRUkSwEPJEsCTwJNSwFMCUxSMQBPBFBJvUUBFERPAxZPA3EBRBZMTwNQTFBPAlC/I0M2GgG9RQEUQzYaATEAMgkSREm+REkiW0lOA04DSYEYVUlOA04ESwFXIAiIAVpPAoEgW08CJFsiKGVEsUsDshRMshJLAbIRJbIQIrIBtkyyMEyyHCqyGiuyGimyGiKyGbIYgQayECKyAbO1OgVJFSRLAQ8kSwJPAk1LAUwJTFIXSU4DTgILSU8CIicGZUQLIicFZURPAgsOQQAjI4ABACJPAlRLAhZQSwQWUEsBFlBLAxZQgAQVH3x1TFCwI0MiQv/agABJNhoBSTEAMgkSREm+REsBVyAIiACuTwKBIFtLAiRbIihlRLFLA7IUTLISSwGyESWyECKyAbZMsjBMshwqshorshopshoishmyGIEGshAisgGztToFSRUkSwEPJEsCTwJNSwFMCUxSF0lOAksBIltPAoEYVUsBC0lOA0sBCU4CDEEABksDvEgjQ0sCSwEJSUUGIicHZURLAwuBkE4KSUUIDEEAB0sDvEhC/9yxSwNXACBLBUsHCbIIsgcjshAisgGzQv/DigEBIicEZURJFSJLAQ8iSwJPAk2BA0sCD4EDSwNPAk1LA04CUiIoZUQWUIv/UClQgRtLAg+BG0sDTwJNTwNMTwNSUIAHUHJvZ3JhbUxQA4k=", "clear": "C4EBQw=="}, "compilerInfo": {"compiler": "puya", "compilerVersion": {"major": 5, "minor": 0, "patch": 1}}, "events": [], "networks": {}, "source": {"approval": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuYXBwcm92YWxfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIGludGNibG9jayAwIDEgOCA0CiAgICBieXRlY2Jsb2NrICJ0aW55bWFuX3JvdXRlciIgMHgwMDAwMDAwMDAwMDAwMDAwIDB4NzM3NzYxNzAgMHg2NjY5Nzg2NTY0MmQ2OTZlNzA3NTc0ICJwb29sX2xvZ2ljc2lnX3RlbXBsYXRlIiAibGlxdWlkYXRpb25fdGhyZXNob2xkIiAic2NhbGVkX2Jhc2VfcGVyY2VudGFnZSIgImZlZSIKICAgIHR4biBBcHBsaWNhdGlvbklECiAgICBibnogbWFpbl9hZnRlcl9pZl9lbHNlQDIKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxNgogICAgLy8gc2VsZi50aW55bWFuX3JvdXRlciA9IFVJbnQ2NCgxNDg2MDcwMDApICN0ZXN0bmV0CiAgICBieXRlY18wIC8vICJ0aW55bWFuX3JvdXRlciIKICAgIHB1c2hpbnQgMTQ4NjA3MDAwIC8vIDE0ODYwNzAwMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxOQogICAgLy8gc2VsZi5wb29sX2xvZ2ljc2lnX3RlbXBsYXRlID0gb3AuYmFzZTY0X2RlY29kZShvcC5CYXNlNjQuU3RkRW5jb2RpbmcsIGIiQm9BWUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBZ1FCYk5RQTBBREVZRWtReEdZRUJFa1NCQVVNPSIpCiAgICBwdXNoYnl0ZXMgMHg0MjZmNDE1OTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE0MTQxNDE2NzUxNDI2MjRlNTE0MTMwNDE0NDQ1NTk0NTZiNTE3ODQ3NTk0NTQyNDU2YjUzNDI0MTU1NGQzZAogICAgYmFzZTY0X2RlY29kZSBTdGRFbmNvZGluZwogICAgYnl0ZWMgNCAvLyAicG9vbF9sb2dpY3NpZ190ZW1wbGF0ZSIKICAgIHN3YXAKICAgIGFwcF9nbG9iYWxfcHV0CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MjAKICAgIC8vIHNlbGYubGlxdWlkYXRpb25fdGhyZXNob2xkID0gVUludDY0KDcwMDApCiAgICBieXRlYyA1IC8vICJsaXF1aWRhdGlvbl90aHJlc2hvbGQiCiAgICBwdXNoaW50IDcwMDAgLy8gNzAwMAogICAgYXBwX2dsb2JhbF9wdXQKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyMQogICAgLy8gc2VsZi5zY2FsZWRfYmFzZV9wZXJjZW50YWdlID0gVUludDY0KDEwXzAwMCkKICAgIGJ5dGVjIDYgLy8gInNjYWxlZF9iYXNlX3BlcmNlbnRhZ2UiCiAgICBwdXNoaW50IDEwMDAwIC8vIDEwMDAwCiAgICBhcHBfZ2xvYmFsX3B1dAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjIyCiAgICAvLyBzZWxmLmZlZSA9IFVJbnQ2NCgxMDAwKQogICAgYnl0ZWMgNyAvLyAiZmVlIgogICAgcHVzaGludCAxMDAwIC8vIDEwMDAKICAgIGFwcF9nbG9iYWxfcHV0CgptYWluX2FmdGVyX2lmX2Vsc2VAMjoKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxNAogICAgLy8gY2xhc3MgTGV2eShBUkM0Q29udHJhY3QpOgogICAgdHhuIE51bUFwcEFyZ3MKICAgIGJ6IG1haW5fX19hbGdvcHlfZGVmYXVsdF9jcmVhdGVAMTQKICAgIHR4biBPbkNvbXBsZXRpb24KICAgICEKICAgIGFzc2VydCAvLyBPbkNvbXBsZXRpb24gbXVzdCBiZSBOb09wCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgYXNzZXJ0CiAgICBwdXNoYnl0ZXNzIDB4MjY1MDVjZWUgMHg3MDA1MjE1NiAweGU2MGNlYWE4IDB4OTFiYThmOWUgMHg3MDBkYzlmMyAvLyBtZXRob2QgIm9wdF9pbnRvX2Fzc2V0KHVpbnQ2NCxwYXkpdm9pZCIsIG1ldGhvZCAiY3JlYXRlX3Bvc2l0aW9uKHBheSx1aW50OCx1aW50NjQpdm9pZCIsIG1ldGhvZCAibm9fY3VycmVudF9wb3NpdGlvbnNfZm9yX3RoaXNfYXNzZXQoKGFkZHJlc3MsdWludDY0KSl2b2lkIiwgbWV0aG9kICJjaGVja19wb3NpdGlvbigoYWRkcmVzcyx1aW50NjQpKShib29sLHVpbnQ2NCx1aW50NjQsdWludDY0LHVpbnQ2NCkiLCBtZXRob2QgImxpcXVpZGF0ZSgoYWRkcmVzcyx1aW50NjQpKXZvaWQiCiAgICB0eG5hIEFwcGxpY2F0aW9uQXJncyAwCiAgICBtYXRjaCBvcHRfaW50b19hc3NldCBjcmVhdGVfcG9zaXRpb24gbm9fY3VycmVudF9wb3NpdGlvbnNfZm9yX3RoaXNfYXNzZXQgY2hlY2tfcG9zaXRpb24gbGlxdWlkYXRlCiAgICBlcnIKCm1haW5fX19hbGdvcHlfZGVmYXVsdF9jcmVhdGVAMTQ6CiAgICB0eG4gT25Db21wbGV0aW9uCiAgICAhCiAgICB0eG4gQXBwbGljYXRpb25JRAogICAgIQogICAgJiYKICAgIHJldHVybiAvLyBvbiBlcnJvcjogT25Db21wbGV0aW9uIG11c3QgYmUgTm9PcCAmJiBjYW4gb25seSBjYWxsIHdoZW4gY3JlYXRpbmcKCgovLyBjb250cmFjdC5MZXZ5Lm9wdF9pbnRvX2Fzc2V0W3JvdXRpbmddKCkgLT4gdm9pZDoKb3B0X2ludG9fYXNzZXQ6CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MjQKICAgIC8vIEBhYmltZXRob2QKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIGJ0b2kKICAgIGR1cAogICAgdHhuIEdyb3VwSW5kZXgKICAgIGludGNfMSAvLyAxCiAgICAtCiAgICBkdXAKICAgIGd0eG5zIFR5cGVFbnVtCiAgICBpbnRjXzEgLy8gcGF5CiAgICA9PQogICAgYXNzZXJ0IC8vIHRyYW5zYWN0aW9uIHR5cGUgaXMgcGF5CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MjYKICAgIC8vIGFzc2VydCBtYnJfcGF5bWVudC5hbW91bnQgPT0gMTAwXzAwMAogICAgZHVwCiAgICBndHhucyBBbW91bnQKICAgIHB1c2hpbnQgMTAwMDAwIC8vIDEwMDAwMAogICAgPT0KICAgIGFzc2VydAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjI3CiAgICAvLyBhc3NlcnQgbWJyX3BheW1lbnQucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZ3R4bnMgUmVjZWl2ZXIKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MjgKICAgIC8vIGlmIG5vdCBHbG9iYWwuY3VycmVudF9hcHBsaWNhdGlvbl9hZGRyZXNzLmlzX29wdGVkX2luKGFzc2V0KToKICAgIGdsb2JhbCBDdXJyZW50QXBwbGljYXRpb25BZGRyZXNzCiAgICBzd2FwCiAgICBhc3NldF9ob2xkaW5nX2dldCBBc3NldEJhbGFuY2UKICAgIGJ1cnkgMQogICAgYm56IG9wdF9pbnRvX2Fzc2V0X2FmdGVyX2lmX2Vsc2VANAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjI5LTMyCiAgICAvLyBpdHhuLkFzc2V0VHJhbnNmZXIoCiAgICAvLyAgICAgYXNzZXRfcmVjZWl2ZXI9R2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcywKICAgIC8vICAgICB4ZmVyX2Fzc2V0PWFzc2V0CiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MzAKICAgIC8vIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgZGlnIDEKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyOQogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50Y18zIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyOS0zMgogICAgLy8gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgLy8gICAgIGFzc2V0X3JlY2VpdmVyPUdsb2JhbC5jdXJyZW50X2FwcGxpY2F0aW9uX2FkZHJlc3MsCiAgICAvLyAgICAgeGZlcl9hc3NldD1hc3NldAogICAgLy8gKS5zdWJtaXQoKQogICAgaXR4bl9zdWJtaXQKCm9wdF9pbnRvX2Fzc2V0X2FmdGVyX2lmX2Vsc2VANDoKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyNAogICAgLy8gQGFiaW1ldGhvZAogICAgaW50Y18xIC8vIDEKICAgIHJldHVybgoKCi8vIGNvbnRyYWN0LkxldnkuY3JlYXRlX3Bvc2l0aW9uW3JvdXRpbmddKCkgLT4gdm9pZDoKY3JlYXRlX3Bvc2l0aW9uOgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjM0CiAgICAvLyBAYWJpbWV0aG9kCiAgICB0eG4gR3JvdXBJbmRleAogICAgaW50Y18xIC8vIDEKICAgIC0KICAgIGR1cAogICAgZ3R4bnMgVHlwZUVudW0KICAgIGludGNfMSAvLyBwYXkKICAgID09CiAgICBhc3NlcnQgLy8gdHJhbnNhY3Rpb24gdHlwZSBpcyBwYXkKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDIKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weTo3NgogICAgLy8gYXNzZXJ0IHBheW1lbnQucmVjZWl2ZXIgPT0gR2xvYmFsLmN1cnJlbnRfYXBwbGljYXRpb25fYWRkcmVzcwogICAgZGlnIDIKICAgIGd0eG5zIFJlY2VpdmVyCiAgICBnbG9iYWwgQ3VycmVudEFwcGxpY2F0aW9uQWRkcmVzcwogICAgPT0KICAgIGFzc2VydAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5Ojc3CiAgICAvLyBhc3NlcnQgcGF5bWVudC5hbW91bnQgPj0gMV8wMDBfMDAwLCAiTWluaW11bSAxIEFsZ28gRGVwb3NpdCIKICAgIHVuY292ZXIgMgogICAgZ3R4bnMgQW1vdW50CiAgICBkdXAKICAgIHB1c2hpbnQgMTAwMDAwMCAvLyAxMDAwMDAwCiAgICA+PQogICAgYXNzZXJ0IC8vIE1pbmltdW0gMSBBbGdvIERlcG9zaXQKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weTo0MgogICAgLy8gbGV2ZXJhZ2VfYW1vdW50ID0gYWxnb19kZXBvc2l0LmFtb3VudCAqIGxldmVyYWdlLmFzX3VpbnQ2NCgpCiAgICBkaWcgMgogICAgYnRvaQogICAgZGlnIDEKICAgICoKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weTo4MgogICAgLy8gcG9vbF9hZGRyZXNzID0gc2VsZi5nZXRfbG9naWNzaWdfYWRkcmVzcyhhc3NldCkKICAgIGRpZyAyCiAgICBjYWxsc3ViIGdldF9sb2dpY3NpZ19hZGRyZXNzCiAgICAvLyBweXRob24vY29udHJhY3QucHk6OTYKICAgIC8vIGFwcF9pZD1zZWxmLnRpbnltYW5fcm91dGVyLAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInRpbnltYW5fcm91dGVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRpbnltYW5fcm91dGVyIGV4aXN0cwogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjEwMAogICAgLy8gYXNzZXRzPShBc3NldChhc3NldC5hc191aW50NjQoKSksKQogICAgZGlnIDQKICAgIGJ0b2kKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxMDMKICAgIC8vIHR4XzEsIHR4XzIgPSBpdHhuLnN1Ym1pdF90eG5zKHB1cmNoYXNlX2VudHJ5X2Fzc2V0LCBlbnRyeV9hc3NldF9idXkpCiAgICBpdHhuX2JlZ2luCiAgICB1bmNvdmVyIDMKICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBkaWcgMgogICAgaXR4bl9maWVsZCBSZWNlaXZlcgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjkwCiAgICAvLyBwdXJjaGFzZV9lbnRyeV9hc3NldCA9IGl0eG4uUGF5bWVudCgKICAgIGludGNfMSAvLyBwYXkKICAgIGl0eG5fZmllbGQgVHlwZUVudW0KICAgIGludGNfMCAvLyAwCiAgICBpdHhuX2ZpZWxkIEZlZQogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjEwMwogICAgLy8gdHhfMSwgdHhfMiA9IGl0eG4uc3VibWl0X3R4bnMocHVyY2hhc2VfZW50cnlfYXNzZXQsIGVudHJ5X2Fzc2V0X2J1eSkKICAgIGl0eG5fbmV4dAogICAgZHVwCiAgICBpdHhuX2ZpZWxkIEFzc2V0cwogICAgdW5jb3ZlciAyCiAgICBpdHhuX2ZpZWxkIEFjY291bnRzCiAgICAvLyBweXRob24vY29udHJhY3QucHk6ODQKICAgIC8vIGFyZ18xID0gQnl0ZXMoYidzd2FwJykKICAgIGJ5dGVjXzIgLy8gMHg3Mzc3NjE3MAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weTo4NQogICAgLy8gYXJnXzIgPSBCeXRlcyhiJ2ZpeGVkLWlucHV0JykKICAgIGJ5dGVjXzMgLy8gMHg2NjY5Nzg2NTY0MmQ2OTZlNzA3NTc0CiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uQXJncwogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5Ojg2CiAgICAvLyBhcmdfMyA9IGFyYzQuVUludDY0KDApLmJ5dGVzCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weTo5NwogICAgLy8gb25fY29tcGxldGlvbj1PbkNvbXBsZXRlQWN0aW9uLk5vT3AsCiAgICBpbnRjXzAgLy8gTm9PcAogICAgaXR4bl9maWVsZCBPbkNvbXBsZXRpb24KICAgIHN3YXAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25JRAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5Ojk1CiAgICAvLyBlbnRyeV9hc3NldF9idXkgPSBpdHhuLkFwcGxpY2F0aW9uQ2FsbCgKICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxMDMKICAgIC8vIHR4XzEsIHR4XzIgPSBpdHhuLnN1Ym1pdF90eG5zKHB1cmNoYXNlX2VudHJ5X2Fzc2V0LCBlbnRyeV9hc3NldF9idXkpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjEwNQogICAgLy8gYXNzZXRfYW1vdW50ID0gYXJjNC5VSW50NjQuZnJvbV9ieXRlcyh0eF8yLmxvZ3MoNSlbLTg6XSkKICAgIGl0eG5hIExvZ3MgNQogICAgZHVwCiAgICBsZW4KICAgIGludGNfMiAvLyA4CiAgICBkaWcgMQogICAgPj0KICAgIGludGNfMiAvLyA4CiAgICBkaWcgMgogICAgdW5jb3ZlciAyCiAgICBzZWxlY3QKICAgIGRpZyAxCiAgICBzd2FwCiAgICAtCiAgICBzd2FwCiAgICBzdWJzdHJpbmczCiAgICAvLyBweXRob24vY29udHJhY3QucHk6NTUKICAgIC8vIHVzZXI9QWRkcmVzcyhUeG4uc2VuZGVyKSwKICAgIHR4biBTZW5kZXIKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weTo1NC01NwogICAgLy8gcmV0dXJuIFVzZXJMZXZlcmFnZUJveE5hbWUoCiAgICAvLyAgICAgdXNlcj1BZGRyZXNzKFR4bi5zZW5kZXIpLAogICAgLy8gICAgIGFzc2V0PWFzc2V0CiAgICAvLyApCiAgICB1bmNvdmVyIDQKICAgIGNvbmNhdAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjUxCiAgICAvLyBhc3NlcnQgdXNlcl9ib3hfbmFtZSBub3QgaW4gc2VsZi51c2VyX2xldmVyYWdlZF9wb3NpdGlvbnMKICAgIGR1cAogICAgYm94X2xlbgogICAgYnVyeSAxCiAgICAhCiAgICBhc3NlcnQKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weTo2OAogICAgLy8gYWxnb19kZXBvc2l0PWFyYzQuVUludDY0KGFsZ29fZGVwb3NpdC5hbW91bnQpLAogICAgdW5jb3ZlciAzCiAgICBpdG9iCiAgICAvLyBweXRob24vY29udHJhY3QucHk6NzAKICAgIC8vIGFzc2V0X2RlY2ltYWxzPWFyYzQuVUludDY0KEFzc2V0KGFzc2V0LmFzX3VpbnQ2NCgpKS5kZWNpbWFscyksCiAgICB1bmNvdmVyIDMKICAgIGFzc2V0X3BhcmFtc19nZXQgQXNzZXREZWNpbWFscwogICAgYXNzZXJ0IC8vIGFzc2V0IGV4aXN0cwogICAgaXRvYgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjY3LTcyCiAgICAvLyByZXR1cm4gVXNlckxldmVyYWdlQm94VmFsdWUoCiAgICAvLyAgICAgYWxnb19kZXBvc2l0PWFyYzQuVUludDY0KGFsZ29fZGVwb3NpdC5hbW91bnQpLAogICAgLy8gICAgIGFzc2V0X2Ftb3VudD1wdXJjaGFzZWRfYW1vdW50LAogICAgLy8gICAgIGFzc2V0X2RlY2ltYWxzPWFyYzQuVUludDY0KEFzc2V0KGFzc2V0LmFzX3VpbnQ2NCgpKS5kZWNpbWFscyksCiAgICAvLyAgICAgbGV2ZXJhZ2U9bGV2ZXJhZ2UKICAgIC8vICkKICAgIHN3YXAKICAgIHVuY292ZXIgMwogICAgY29uY2F0CiAgICBzd2FwCiAgICBjb25jYXQKICAgIHVuY292ZXIgMgogICAgY29uY2F0CiAgICAvLyBweXRob24vY29udHJhY3QucHk6NDcKICAgIC8vIHNlbGYudXNlcl9sZXZlcmFnZWRfcG9zaXRpb25zW3VzZXJfYm94X25hbWVdID0gdXNlcl9ib3hfdmFsdWUuY29weSgpCiAgICBib3hfcHV0CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MzQKICAgIC8vIEBhYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCgovLyBjb250cmFjdC5MZXZ5Lm5vX2N1cnJlbnRfcG9zaXRpb25zX2Zvcl90aGlzX2Fzc2V0W3JvdXRpbmddKCkgLT4gdm9pZDoKbm9fY3VycmVudF9wb3NpdGlvbnNfZm9yX3RoaXNfYXNzZXQ6CiAgICAvLyBweXRob24vY29udHJhY3QucHk6NDkKICAgIC8vIEBhYmltZXRob2QKICAgIHR4bmEgQXBwbGljYXRpb25BcmdzIDEKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weTo1MQogICAgLy8gYXNzZXJ0IHVzZXJfYm94X25hbWUgbm90IGluIHNlbGYudXNlcl9sZXZlcmFnZWRfcG9zaXRpb25zCiAgICBib3hfbGVuCiAgICBidXJ5IDEKICAgICEKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weTo0OQogICAgLy8gQGFiaW1ldGhvZAogICAgcmV0dXJuCgoKLy8gY29udHJhY3QuTGV2eS5jaGVja19wb3NpdGlvbltyb3V0aW5nXSgpIC0+IHZvaWQ6CmNoZWNrX3Bvc2l0aW9uOgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjEyMwogICAgLy8gQGFiaW1ldGhvZAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjEyNQogICAgLy8gYXNzZXJ0IFR4bi5zZW5kZXIgPT0gR2xvYmFsLmNyZWF0b3JfYWRkcmVzcwogICAgdHhuIFNlbmRlcgogICAgZ2xvYmFsIENyZWF0b3JBZGRyZXNzCiAgICA9PQogICAgYXNzZXJ0CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTI2CiAgICAvLyBsZXZlcmFnZV9ib3hfdmFsdWUgPSBzZWxmLnVzZXJfbGV2ZXJhZ2VkX3Bvc2l0aW9uc1t1c2VyX2JveF9uYW1lXS5jb3B5KCkKICAgIGR1cAogICAgYm94X2dldAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudXNlcl9sZXZlcmFnZWRfcG9zaXRpb25zIGVudHJ5IGV4aXN0cwogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjEyNwogICAgLy8gaW5pdGlhbF9hbGdvX2Ftb3VudCA9IGxldmVyYWdlX2JveF92YWx1ZS5hbGdvX2RlcG9zaXQuYXNfdWludDY0KCkKICAgIGR1cAogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICBkdXAKICAgIGNvdmVyIDMKICAgIGNvdmVyIDMKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxMjgKICAgIC8vIGxldmVyYWdlID0gbGV2ZXJhZ2VfYm94X3ZhbHVlLmxldmVyYWdlLmFzX3VpbnQ2NCgpCiAgICBkdXAKICAgIHB1c2hpbnQgMjQgLy8gMjQKICAgIGdldGJ5dGUKICAgIGR1cAogICAgY292ZXIgMwogICAgY292ZXIgNAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjEzMQogICAgLy8gcG9vbF9hZGRyZXNzID0gc2VsZi5nZXRfbG9naWNzaWdfYWRkcmVzcyh1c2VyX2JveF9uYW1lLmFzc2V0KQogICAgZGlnIDEKICAgIGV4dHJhY3QgMzIgOAogICAgY2FsbHN1YiBnZXRfbG9naWNzaWdfYWRkcmVzcwogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjEzNAogICAgLy8geGZlcl9hc3NldD11c2VyX2JveF9uYW1lLmFzc2V0LmFzX3VpbnQ2NCgpLAogICAgdW5jb3ZlciAyCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTMxCiAgICAvLyBwb29sX2FkZHJlc3MgPSBzZWxmLmdldF9sb2dpY3NpZ19hZGRyZXNzKHVzZXJfYm94X25hbWUuYXNzZXQpCiAgICBwdXNoaW50IDMyIC8vIDMyCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTM0CiAgICAvLyB4ZmVyX2Fzc2V0PXVzZXJfYm94X25hbWUuYXNzZXQuYXNfdWludDY0KCksCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjEzNQogICAgLy8gYXNzZXRfYW1vdW50PWFzc2V0X2hvbGRpbmdzX2Ftb3VudC5hc191aW50NjQoKSwKICAgIHVuY292ZXIgMgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjEyOQogICAgLy8gYXNzZXRfaG9sZGluZ3NfYW1vdW50ID0gbGV2ZXJhZ2VfYm94X3ZhbHVlLmFzc2V0X2Ftb3VudAogICAgaW50Y18yIC8vIDgKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxMzUKICAgIC8vIGFzc2V0X2Ftb3VudD1hc3NldF9ob2xkaW5nc19hbW91bnQuYXNfdWludDY0KCksCiAgICBleHRyYWN0X3VpbnQ2NAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjE0NAogICAgLy8gYXBwX2lkPXNlbGYudGlueW1hbl9yb3V0ZXIsCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWNfMCAvLyAidGlueW1hbl9yb3V0ZXIiCiAgICBhcHBfZ2xvYmFsX2dldF9leAogICAgYXNzZXJ0IC8vIGNoZWNrIHNlbGYudGlueW1hbl9yb3V0ZXIgZXhpc3RzCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTUxCiAgICAvLyB0eF8xLCB0eF8yID0gaXR4bi5zdWJtaXRfdHhucyhzZWxsX2Fzc2V0LCBhc3NldF9zZWxsKQogICAgaXR4bl9iZWdpbgogICAgZGlnIDMKICAgIGl0eG5fZmllbGQgQXNzZXRSZWNlaXZlcgogICAgc3dhcAogICAgaXR4bl9maWVsZCBBc3NldEFtb3VudAogICAgZGlnIDEKICAgIGl0eG5fZmllbGQgWGZlckFzc2V0CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTMzCiAgICAvLyBzZWxsX2Fzc2V0ID0gaXR4bi5Bc3NldFRyYW5zZmVyKAogICAgaW50Y18zIC8vIGF4ZmVyCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxNTEKICAgIC8vIHR4XzEsIHR4XzIgPSBpdHhuLnN1Ym1pdF90eG5zKHNlbGxfYXNzZXQsIGFzc2V0X3NlbGwpCiAgICBpdHhuX25leHQKICAgIHN3YXAKICAgIGl0eG5fZmllbGQgQXNzZXRzCiAgICBzd2FwCiAgICBpdHhuX2ZpZWxkIEFjY291bnRzCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTM5CiAgICAvLyBhcmdfMSA9IEJ5dGVzKGInc3dhcCcpCiAgICBieXRlY18yIC8vIDB4NzM3NzYxNzAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTQwCiAgICAvLyBhcmdfMiA9IEJ5dGVzKGInZml4ZWQtaW5wdXQnKQogICAgYnl0ZWNfMyAvLyAweDY2Njk3ODY1NjQyZDY5NmU3MDc1NzQKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTQxCiAgICAvLyBhcmdfMyA9IGFyYzQuVUludDY0KDApLmJ5dGVzCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxNDUKICAgIC8vIG9uX2NvbXBsZXRpb249T25Db21wbGV0ZUFjdGlvbi5Ob09wLAogICAgaW50Y18wIC8vIE5vT3AKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxNDMKICAgIC8vIGFzc2V0X3NlbGwgPSBpdHhuLkFwcGxpY2F0aW9uQ2FsbCgKICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxNTEKICAgIC8vIHR4XzEsIHR4XzIgPSBpdHhuLnN1Ym1pdF90eG5zKHNlbGxfYXNzZXQsIGFzc2V0X3NlbGwpCiAgICBpdHhuX3N1Ym1pdAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjE1MwogICAgLy8gYWxnb19yZWNlaXZlZF9pZl9wb3NpdGlvbl9jbG9zZWQgPSBhcmM0LlVJbnQ2NC5mcm9tX2J5dGVzKHR4XzIubG9ncyg1KVstODpdKS5hc191aW50NjQoKQogICAgaXR4bmEgTG9ncyA1CiAgICBkdXAKICAgIGxlbgogICAgaW50Y18yIC8vIDgKICAgIGRpZyAxCiAgICA+PQogICAgaW50Y18yIC8vIDgKICAgIGRpZyAyCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgZGlnIDEKICAgIHN3YXAKICAgIC0KICAgIHN3YXAKICAgIHN1YnN0cmluZzMKICAgIGJ0b2kKICAgIGR1cAogICAgY292ZXIgMwogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjE1NQogICAgLy8gaW5pdGlhbF9wb3NpdGlvbiA9IGluaXRpYWxfYWxnb19hbW91bnQgKiBsZXZlcmFnZQogICAgY292ZXIgMgogICAgKgogICAgZHVwCiAgICB1bmNvdmVyIDIKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxNTkKICAgIC8vIHNjYWxlZF9wb3NpdGlvbiA9IGFsZ29fcmVjZWl2ZWRfaWZfcG9zaXRpb25fY2xvc2VkICogc2VsZi5zY2FsZWRfYmFzZV9wZXJjZW50YWdlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNiAvLyAic2NhbGVkX2Jhc2VfcGVyY2VudGFnZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5zY2FsZWRfYmFzZV9wZXJjZW50YWdlIGV4aXN0cwogICAgKgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjE2MAogICAgLy8gc2NhbGVkX2xpcXVpZGF0aW9uX3RocmVzaG9sZCA9IGluaXRpYWxfcG9zaXRpb24gKiBzZWxmLmxpcXVpZGF0aW9uX3RocmVzaG9sZAogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjIDUgLy8gImxpcXVpZGF0aW9uX3RocmVzaG9sZCIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5saXF1aWRhdGlvbl90aHJlc2hvbGQgZXhpc3RzCiAgICB1bmNvdmVyIDIKICAgICoKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxNjIKICAgIC8vIGlmIHNjYWxlZF9wb3NpdGlvbiA8PSBzY2FsZWRfbGlxdWlkYXRpb25fdGhyZXNob2xkOgogICAgPD0KICAgIGJ6IGNoZWNrX3Bvc2l0aW9uX2Vsc2VfYm9keUA1CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTYzCiAgICAvLyByZXR1cm4gVHJ1ZSwgYWxnb19yZWNlaXZlZF9pZl9wb3NpdGlvbl9jbG9zZWQsIGluaXRpYWxfYWxnb19hbW91bnQsIGluaXRpYWxfcG9zaXRpb24sIGxldmVyYWdlCiAgICBpbnRjXzEgLy8gMQoKY2hlY2tfcG9zaXRpb25fYWZ0ZXJfaW5saW5lZF9jb250cmFjdC5MZXZ5LmNoZWNrX3Bvc2l0aW9uQDY6CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTIzCiAgICAvLyBAYWJpbWV0aG9kCiAgICBwdXNoYnl0ZXMgMHgwMAogICAgaW50Y18wIC8vIDAKICAgIHVuY292ZXIgMgogICAgc2V0Yml0CiAgICBkaWcgMgogICAgaXRvYgogICAgY29uY2F0CiAgICBkaWcgNAogICAgaXRvYgogICAgY29uY2F0CiAgICBkaWcgMQogICAgaXRvYgogICAgY29uY2F0CiAgICBkaWcgMwogICAgaXRvYgogICAgY29uY2F0CiAgICBwdXNoYnl0ZXMgMHgxNTFmN2M3NQogICAgc3dhcAogICAgY29uY2F0CiAgICBsb2cKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCmNoZWNrX3Bvc2l0aW9uX2Vsc2VfYm9keUA1OgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjE2NQogICAgLy8gcmV0dXJuIEZhbHNlLCBhbGdvX3JlY2VpdmVkX2lmX3Bvc2l0aW9uX2Nsb3NlZCwgaW5pdGlhbF9hbGdvX2Ftb3VudCwgaW5pdGlhbF9wb3NpdGlvbiwgbGV2ZXJhZ2UKICAgIGludGNfMCAvLyAwCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTIzCiAgICAvLyBAYWJpbWV0aG9kCiAgICBiIGNoZWNrX3Bvc2l0aW9uX2FmdGVyX2lubGluZWRfY29udHJhY3QuTGV2eS5jaGVja19wb3NpdGlvbkA2CgoKLy8gY29udHJhY3QuTGV2eS5saXF1aWRhdGVbcm91dGluZ10oKSAtPiB2b2lkOgpsaXF1aWRhdGU6CiAgICBwdXNoYnl0ZXMgIiIKICAgIGR1cAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjE2OAogICAgLy8gQGFiaW1ldGhvZAogICAgdHhuYSBBcHBsaWNhdGlvbkFyZ3MgMQogICAgZHVwCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTcwCiAgICAvLyBhc3NlcnQgVHhuLnNlbmRlciA9PSBHbG9iYWwuY3JlYXRvcl9hZGRyZXNzCiAgICB0eG4gU2VuZGVyCiAgICBnbG9iYWwgQ3JlYXRvckFkZHJlc3MKICAgID09CiAgICBhc3NlcnQKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxNzEKICAgIC8vIHVzZXJfYm94X3ZhbHVlID0gc2VsZi51c2VyX2xldmVyYWdlZF9wb3NpdGlvbnNbdXNlcl9ib3hfbmFtZV0uY29weSgpCiAgICBkdXAKICAgIGJveF9nZXQKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnVzZXJfbGV2ZXJhZ2VkX3Bvc2l0aW9ucyBlbnRyeSBleGlzdHMKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxODgKICAgIC8vIHBvb2xfYWRkcmVzcyA9IHNlbGYuZ2V0X2xvZ2ljc2lnX2FkZHJlc3ModXNlcl9ib3hfbmFtZS5hc3NldCkKICAgIGRpZyAxCiAgICBleHRyYWN0IDMyIDgKICAgIGNhbGxzdWIgZ2V0X2xvZ2ljc2lnX2FkZHJlc3MKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxOTIKICAgIC8vIHhmZXJfYXNzZXQ9dXNlcl9ib3hfbmFtZS5hc3NldC5hc191aW50NjQoKSwKICAgIHVuY292ZXIgMgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjE4OAogICAgLy8gcG9vbF9hZGRyZXNzID0gc2VsZi5nZXRfbG9naWNzaWdfYWRkcmVzcyh1c2VyX2JveF9uYW1lLmFzc2V0KQogICAgcHVzaGludCAzMiAvLyAzMgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjE5MgogICAgLy8geGZlcl9hc3NldD11c2VyX2JveF9uYW1lLmFzc2V0LmFzX3VpbnQ2NCgpLAogICAgZXh0cmFjdF91aW50NjQKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxOTMKICAgIC8vIGFzc2V0X2Ftb3VudD1hc3NldF9ob2xkaW5nc19hbW91bnQuYXNfdWludDY0KCksCiAgICBkaWcgMgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjE4OQogICAgLy8gYXNzZXRfaG9sZGluZ3NfYW1vdW50ID0gdXNlcl9ib3hfdmFsdWUuYXNzZXRfYW1vdW50CiAgICBpbnRjXzIgLy8gOAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjE5MwogICAgLy8gYXNzZXRfYW1vdW50PWFzc2V0X2hvbGRpbmdzX2Ftb3VudC5hc191aW50NjQoKSwKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MjAyCiAgICAvLyBhcHBfaWQ9c2VsZi50aW55bWFuX3JvdXRlciwKICAgIGludGNfMCAvLyAwCiAgICBieXRlY18wIC8vICJ0aW55bWFuX3JvdXRlciIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi50aW55bWFuX3JvdXRlciBleGlzdHMKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyMDkKICAgIC8vIHNlbGxfYXNzZXRfYXhmZXJfcmVzdWx0LCBzZWxsX2Fzc2V0X2FwcF9jYWxsX3Jlc3VsdCA9IGl0eG4uc3VibWl0X3R4bnMoc2VsbF9hc3NldCwgYXNzZXRfc2VsbCkKICAgIGl0eG5fYmVnaW4KICAgIGRpZyAzCiAgICBpdHhuX2ZpZWxkIEFzc2V0UmVjZWl2ZXIKICAgIHN3YXAKICAgIGl0eG5fZmllbGQgQXNzZXRBbW91bnQKICAgIGRpZyAxCiAgICBpdHhuX2ZpZWxkIFhmZXJBc3NldAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjE5MQogICAgLy8gc2VsbF9hc3NldCA9IGl0eG4uQXNzZXRUcmFuc2ZlcigKICAgIGludGNfMyAvLyBheGZlcgogICAgaXR4bl9maWVsZCBUeXBlRW51bQogICAgaW50Y18wIC8vIDAKICAgIGl0eG5fZmllbGQgRmVlCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MjA5CiAgICAvLyBzZWxsX2Fzc2V0X2F4ZmVyX3Jlc3VsdCwgc2VsbF9hc3NldF9hcHBfY2FsbF9yZXN1bHQgPSBpdHhuLnN1Ym1pdF90eG5zKHNlbGxfYXNzZXQsIGFzc2V0X3NlbGwpCiAgICBpdHhuX25leHQKICAgIHN3YXAKICAgIGl0eG5fZmllbGQgQXNzZXRzCiAgICBzd2FwCiAgICBpdHhuX2ZpZWxkIEFjY291bnRzCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTk3CiAgICAvLyBhcmdfMSA9IEJ5dGVzKGInc3dhcCcpCiAgICBieXRlY18yIC8vIDB4NzM3NzYxNzAKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTk4CiAgICAvLyBhcmdfMiA9IEJ5dGVzKGInZml4ZWQtaW5wdXQnKQogICAgYnl0ZWNfMyAvLyAweDY2Njk3ODY1NjQyZDY5NmU3MDc1NzQKICAgIGl0eG5fZmllbGQgQXBwbGljYXRpb25BcmdzCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTk5CiAgICAvLyBhcmdfMyA9IGFyYzQuVUludDY0KDApLmJ5dGVzCiAgICBieXRlY18xIC8vIDB4MDAwMDAwMDAwMDAwMDAwMAogICAgaXR4bl9maWVsZCBBcHBsaWNhdGlvbkFyZ3MKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyMDMKICAgIC8vIG9uX2NvbXBsZXRpb249T25Db21wbGV0ZUFjdGlvbi5Ob09wLAogICAgaW50Y18wIC8vIE5vT3AKICAgIGl0eG5fZmllbGQgT25Db21wbGV0aW9uCiAgICBpdHhuX2ZpZWxkIEFwcGxpY2F0aW9uSUQKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyMDEKICAgIC8vIGFzc2V0X3NlbGwgPSBpdHhuLkFwcGxpY2F0aW9uQ2FsbCgKICAgIHB1c2hpbnQgNiAvLyBhcHBsCiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyMDkKICAgIC8vIHNlbGxfYXNzZXRfYXhmZXJfcmVzdWx0LCBzZWxsX2Fzc2V0X2FwcF9jYWxsX3Jlc3VsdCA9IGl0eG4uc3VibWl0X3R4bnMoc2VsbF9hc3NldCwgYXNzZXRfc2VsbCkKICAgIGl0eG5fc3VibWl0CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MjEwCiAgICAvLyByZXR1cm4gYXJjNC5VSW50NjQuZnJvbV9ieXRlcyhzZWxsX2Fzc2V0X2FwcF9jYWxsX3Jlc3VsdC5sb2dzKDUpWy04Ol0pLmFzX3VpbnQ2NCgpCiAgICBpdHhuYSBMb2dzIDUKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzIgLy8gOAogICAgZGlnIDEKICAgID49CiAgICBpbnRjXzIgLy8gOAogICAgZGlnIDIKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBkaWcgMQogICAgc3dhcAogICAgLQogICAgc3dhcAogICAgc3Vic3RyaW5nMwogICAgYnRvaQogICAgZHVwCiAgICBjb3ZlciAyCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MjIxCiAgICAvLyBpbml0aWFsX2FsZ29fYW1vdW50ID0gdXNlcl9ib3hfdmFsdWUuYWxnb19kZXBvc2l0LmFzX3VpbnQ2NCgpCiAgICBkaWcgMQogICAgaW50Y18wIC8vIDAKICAgIGV4dHJhY3RfdWludDY0CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MjIyCiAgICAvLyBsZXZlcmFnZSA9IHVzZXJfYm94X3ZhbHVlLmxldmVyYWdlLmFzX3VpbnQ2NCgpCiAgICB1bmNvdmVyIDIKICAgIHB1c2hpbnQgMjQgLy8gMjQKICAgIGdldGJ5dGUKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyMjQKICAgIC8vIGluaXRpYWxfcG9zaXRpb24gPSBpbml0aWFsX2FsZ29fYW1vdW50ICogbGV2ZXJhZ2UKICAgIGRpZyAxCiAgICAqCiAgICBkdXAKICAgIGNvdmVyIDMKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyMjUKICAgIC8vIGRlYnQgPSBpbml0aWFsX3Bvc2l0aW9uIC0gaW5pdGlhbF9hbGdvX2Ftb3VudAogICAgZGlnIDEKICAgIC0KICAgIGNvdmVyIDIKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyMjcKICAgIC8vIGlmIGFsZ29fcmVjZWl2ZWRfYWZ0ZXJfY2xvc2luZ19wb3NpdGlvbiA8IGluaXRpYWxfYWxnb19hbW91bnQ6CiAgICA8CiAgICBieiBsaXF1aWRhdGVfZWxzZV9ib2R5QDUKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyMjgKICAgIC8vIGRlbCBzZWxmLnVzZXJfbGV2ZXJhZ2VkX3Bvc2l0aW9uc1t1c2VyX2JveF9uYW1lXQogICAgZGlnIDMKICAgIGJveF9kZWwKICAgIHBvcAoKbGlxdWlkYXRlX2FmdGVyX2lmX2Vsc2VAODoKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxNjgKICAgIC8vIEBhYmltZXRob2QKICAgIGludGNfMSAvLyAxCiAgICByZXR1cm4KCmxpcXVpZGF0ZV9lbHNlX2JvZHlANToKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyMzEKICAgIC8vIHVzZXJfcmVtYWluaW5nX2Z1bmRzID0gYWxnb19yZWNlaXZlZF9hZnRlcl9jbG9zaW5nX3Bvc2l0aW9uIC0gZGVidAogICAgZGlnIDIKICAgIGRpZyAxCiAgICAtCiAgICBkdXAKICAgIGJ1cnkgNgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjIzMgogICAgLy8gZmVlID0gKGluaXRpYWxfcG9zaXRpb24gKiBzZWxmLmZlZSkgLy8gMTBfMDAwCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNyAvLyAiZmVlIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLmZlZSBleGlzdHMKICAgIGRpZyAzCiAgICAqCiAgICBwdXNoaW50IDEwMDAwIC8vIDEwMDAwCiAgICAvCiAgICBkdXAKICAgIGJ1cnkgOAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjIzMwogICAgLy8gaWYgZmVlID4gdXNlcl9yZW1haW5pbmdfZnVuZHM6CiAgICA8CiAgICBieiBsaXF1aWRhdGVfZWxzZV9ib2R5QDcKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyMzQKICAgIC8vIGRlbCBzZWxmLnVzZXJfbGV2ZXJhZ2VkX3Bvc2l0aW9uc1t1c2VyX2JveF9uYW1lXQogICAgZGlnIDMKICAgIGJveF9kZWwKICAgIHBvcAogICAgYiBsaXF1aWRhdGVfYWZ0ZXJfaWZfZWxzZUA4CgpsaXF1aWRhdGVfZWxzZV9ib2R5QDc6CiAgICAvLyBweXRob24vY29udHJhY3QucHk6MjM2LTIzOQogICAgLy8gaXR4bi5QYXltZW50KAogICAgLy8gICAgIHJlY2VpdmVyPXVzZXJfYm94X25hbWUudXNlci5uYXRpdmUsCiAgICAvLyAgICAgYW1vdW50PXVzZXJfcmVtYWluaW5nX2Z1bmRzIC0gZmVlCiAgICAvLyApLnN1Ym1pdCgpCiAgICBpdHhuX2JlZ2luCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MjM3CiAgICAvLyByZWNlaXZlcj11c2VyX2JveF9uYW1lLnVzZXIubmF0aXZlLAogICAgZGlnIDMKICAgIGV4dHJhY3QgMCAzMgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjIzOAogICAgLy8gYW1vdW50PXVzZXJfcmVtYWluaW5nX2Z1bmRzIC0gZmVlCiAgICBkaWcgNQogICAgZGlnIDcKICAgIC0KICAgIGl0eG5fZmllbGQgQW1vdW50CiAgICBpdHhuX2ZpZWxkIFJlY2VpdmVyCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MjM2CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICBpbnRjXzEgLy8gcGF5CiAgICBpdHhuX2ZpZWxkIFR5cGVFbnVtCiAgICBpbnRjXzAgLy8gMAogICAgaXR4bl9maWVsZCBGZWUKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToyMzYtMjM5CiAgICAvLyBpdHhuLlBheW1lbnQoCiAgICAvLyAgICAgcmVjZWl2ZXI9dXNlcl9ib3hfbmFtZS51c2VyLm5hdGl2ZSwKICAgIC8vICAgICBhbW91bnQ9dXNlcl9yZW1haW5pbmdfZnVuZHMgLSBmZWUKICAgIC8vICkuc3VibWl0KCkKICAgIGl0eG5fc3VibWl0CiAgICBiIGxpcXVpZGF0ZV9hZnRlcl9pZl9lbHNlQDgKCgovLyBjb250cmFjdC5MZXZ5LmdldF9sb2dpY3NpZ19hZGRyZXNzKGFzc2V0OiBieXRlcykgLT4gYnl0ZXM6CmdldF9sb2dpY3NpZ19hZGRyZXNzOgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjEwOC0xMDkKICAgIC8vIEBzdWJyb3V0aW5lCiAgICAvLyBkZWYgZ2V0X2xvZ2ljc2lnX2FkZHJlc3Moc2VsZiwgYXNzZXQ6IGFyYzQuVUludDY0KSAtPiBBY2NvdW50OgogICAgcHJvdG8gMSAxCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTEwCiAgICAvLyBwcm9ncmFtX2J5dGVzID0gc2VsZi5wb29sX2xvZ2ljc2lnX3RlbXBsYXRlCiAgICBpbnRjXzAgLy8gMAogICAgYnl0ZWMgNCAvLyAicG9vbF9sb2dpY3NpZ190ZW1wbGF0ZSIKICAgIGFwcF9nbG9iYWxfZ2V0X2V4CiAgICBhc3NlcnQgLy8gY2hlY2sgc2VsZi5wb29sX2xvZ2ljc2lnX3RlbXBsYXRlIGV4aXN0cwogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjExMwogICAgLy8gcHJvZ3JhbV9ieXRlc1swOjNdICsKICAgIGR1cAogICAgbGVuCiAgICBpbnRjXzAgLy8gMAogICAgZGlnIDEKICAgID49CiAgICBpbnRjXzAgLy8gMAogICAgZGlnIDIKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBwdXNoaW50IDMgLy8gMwogICAgZGlnIDIKICAgID49CiAgICBwdXNoaW50IDMgLy8gMwogICAgZGlnIDMKICAgIHVuY292ZXIgMgogICAgc2VsZWN0CiAgICBkaWcgMwogICAgY292ZXIgMgogICAgc3Vic3RyaW5nMwogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjExNAogICAgLy8gYXJjNC5VSW50NjQoc2VsZi50aW55bWFuX3JvdXRlcikuYnl0ZXMgKwogICAgaW50Y18wIC8vIDAKICAgIGJ5dGVjXzAgLy8gInRpbnltYW5fcm91dGVyIgogICAgYXBwX2dsb2JhbF9nZXRfZXgKICAgIGFzc2VydCAvLyBjaGVjayBzZWxmLnRpbnltYW5fcm91dGVyIGV4aXN0cwogICAgaXRvYgogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjExMy0xMTQKICAgIC8vIHByb2dyYW1fYnl0ZXNbMDozXSArCiAgICAvLyBhcmM0LlVJbnQ2NChzZWxmLnRpbnltYW5fcm91dGVyKS5ieXRlcyArCiAgICBjb25jYXQKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxMTMtMTE1CiAgICAvLyBwcm9ncmFtX2J5dGVzWzA6M10gKwogICAgLy8gYXJjNC5VSW50NjQoc2VsZi50aW55bWFuX3JvdXRlcikuYnl0ZXMgKwogICAgLy8gYXNzZXQuYnl0ZXMgKwogICAgZnJhbWVfZGlnIC0xCiAgICBjb25jYXQKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxMTYKICAgIC8vIGFyYzQuVUludDY0KDApLmJ5dGVzICsKICAgIGJ5dGVjXzEgLy8gMHgwMDAwMDAwMDAwMDAwMDAwCiAgICAvLyBweXRob24vY29udHJhY3QucHk6MTEzLTExNgogICAgLy8gcHJvZ3JhbV9ieXRlc1swOjNdICsKICAgIC8vIGFyYzQuVUludDY0KHNlbGYudGlueW1hbl9yb3V0ZXIpLmJ5dGVzICsKICAgIC8vIGFzc2V0LmJ5dGVzICsKICAgIC8vIGFyYzQuVUludDY0KDApLmJ5dGVzICsKICAgIGNvbmNhdAogICAgLy8gcHl0aG9uL2NvbnRyYWN0LnB5OjExNwogICAgLy8gcHJvZ3JhbV9ieXRlc1syNzpdCiAgICBwdXNoaW50IDI3IC8vIDI3CiAgICBkaWcgMgogICAgPj0KICAgIHB1c2hpbnQgMjcgLy8gMjcKICAgIGRpZyAzCiAgICB1bmNvdmVyIDIKICAgIHNlbGVjdAogICAgdW5jb3ZlciAzCiAgICBzd2FwCiAgICB1bmNvdmVyIDMKICAgIHN1YnN0cmluZzMKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxMTMtMTE3CiAgICAvLyBwcm9ncmFtX2J5dGVzWzA6M10gKwogICAgLy8gYXJjNC5VSW50NjQoc2VsZi50aW55bWFuX3JvdXRlcikuYnl0ZXMgKwogICAgLy8gYXNzZXQuYnl0ZXMgKwogICAgLy8gYXJjNC5VSW50NjQoMCkuYnl0ZXMgKwogICAgLy8gcHJvZ3JhbV9ieXRlc1syNzpdCiAgICBjb25jYXQKICAgIC8vIHB5dGhvbi9jb250cmFjdC5weToxMjAKICAgIC8vIHJldHVybiBBY2NvdW50LmZyb21fYnl0ZXMob3Auc2hhNTEyXzI1NihiJ1Byb2dyYW0nICsgcHJvZ3JhbV9ieXRlcykpCiAgICBwdXNoYnl0ZXMgMHg1MDcyNmY2NzcyNjE2ZAogICAgc3dhcAogICAgY29uY2F0CiAgICBzaGE1MTJfMjU2CiAgICByZXRzdWIK", "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"}, "sourceInfo": {"approval": {"pcOffsetMethod": "none", "sourceInfo": [{"pc": [379], "errorMessage": "Minimum 1 Algo Deposit"}, {"pc": [232], "errorMessage": "OnCompletion must be NoOp"}, {"pc": [286], "errorMessage": "OnCompletion must be NoOp && can only call when creating"}, {"pc": [483], "errorMessage": "asset exists"}, {"pc": [841], "errorMessage": "check self.fee exists"}, {"pc": [643], "errorMessage": "check self.liquidation_threshold exists"}, {"pc": [895], "errorMessage": "check self.pool_logicsig_template exists"}, {"pc": [637], "errorMessage": "check self.scaled_base_percentage exists"}, {"pc": [394, 554, 726, 928], "errorMessage": "check self.tinyman_router exists"}, {"pc": [516, 705], "errorMessage": "check self.user_leveraged_positions entry exists"}, {"pc": [301, 354], "errorMessage": "transaction type is pay"}]}, "clear": {"pcOffsetMethod": "none", "sourceInfo": []}}, "templateVariables": {}}"""
APP_SPEC = algokit_utils.Arc56Contract.from_json(_APP_SPEC_JSON)

def _parse_abi_args(args: object | None = None) -> list[object] | None:
    """Helper to parse ABI args into the format expected by underlying client"""
    if args is None:
        return None

    def convert_dataclass(value: object) -> object:
        if dataclasses.is_dataclass(value):
            return tuple(convert_dataclass(getattr(value, field.name)) for field in dataclasses.fields(value))
        elif isinstance(value, (list, tuple)):
            return type(value)(convert_dataclass(item) for item in value)
        return value

    match args:
        case tuple():
            method_args = list(args)
        case _ if dataclasses.is_dataclass(args):
            method_args = [getattr(args, field.name) for field in dataclasses.fields(args)]
        case _:
            raise ValueError("Invalid 'args' type. Expected 'tuple' or 'TypedDict' for respective typed arguments.")

    return [
        convert_dataclass(arg) if not isinstance(arg, algokit_utils.AppMethodCallTransactionArgument) else arg
        for arg in method_args
    ] if method_args else None

def _init_dataclass(cls: type, data: dict) -> object:
    """
    Recursively instantiate a dataclass of type `cls` from `data`.

    For each field on the dataclass, if the field type is also a dataclass
    and the corresponding data is a dict, instantiate that field recursively.
    """
    field_values = {}
    for field in dataclasses.fields(cls):
        field_value = data.get(field.name)
        # Check if the field expects another dataclass and the value is a dict.
        if dataclasses.is_dataclass(field.type) and isinstance(field_value, dict):
            field_values[field.name] = _init_dataclass(typing.cast(type, field.type), field_value)
        else:
            field_values[field.name] = field_value
    return cls(**field_values)

@dataclasses.dataclass(frozen=True)
class UserLeverageBoxName:
    """Struct for UserLeverageBoxName"""
    user: str
    asset: int

@dataclasses.dataclass(frozen=True)
class UserLeverageBoxValue:
    """Struct for UserLeverageBoxValue"""
    algo_deposit: int
    asset_amount: int
    asset_decimals: int
    leverage: int


@dataclasses.dataclass(frozen=True, kw_only=True)
class OptIntoAssetArgs:
    """Dataclass for opt_into_asset arguments"""
    asset: int
    mbr_payment: algokit_utils.AppMethodCallTransactionArgument

    @property
    def abi_method_signature(self) -> str:
        return "opt_into_asset(uint64,pay)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CreatePositionArgs:
    """Dataclass for create_position arguments"""
    algo_deposit: algokit_utils.AppMethodCallTransactionArgument
    leverage: int
    asset: int

    @property
    def abi_method_signature(self) -> str:
        return "create_position(pay,uint8,uint64)void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class NoCurrentPositionsForThisAssetArgs:
    """Dataclass for no_current_positions_for_this_asset arguments"""
    user_box_name: UserLeverageBoxName

    @property
    def abi_method_signature(self) -> str:
        return "no_current_positions_for_this_asset((address,uint64))void"

@dataclasses.dataclass(frozen=True, kw_only=True)
class CheckPositionArgs:
    """Dataclass for check_position arguments"""
    user_box_name: UserLeverageBoxName

    @property
    def abi_method_signature(self) -> str:
        return "check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)"

@dataclasses.dataclass(frozen=True, kw_only=True)
class LiquidateArgs:
    """Dataclass for liquidate arguments"""
    user_box_name: UserLeverageBoxName

    @property
    def abi_method_signature(self) -> str:
        return "liquidate((address,uint64))void"


class LevyParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def opt_into_asset(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | OptIntoAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_into_asset(uint64,pay)void",
            "args": method_args,
        }))

    def create_position(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreatePositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_position(pay,uint8,uint64)void",
            "args": method_args,
        }))

    def no_current_positions_for_this_asset(
        self,
        args: tuple[UserLeverageBoxName] | NoCurrentPositionsForThisAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "no_current_positions_for_this_asset((address,uint64))void",
            "args": method_args,
        }))

    def check_position(
        self,
        args: tuple[UserLeverageBoxName] | CheckPositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def liquidate(
        self,
        args: tuple[UserLeverageBoxName] | LiquidateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.AppCallMethodCallParams:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.params.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "liquidate((address,uint64))void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> algokit_utils.AppCallParams:
        return self.app_client.params.bare.clear_state(
            params,
            
        )


class LevyCreateTransactionParams:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def opt_into_asset(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | OptIntoAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_into_asset(uint64,pay)void",
            "args": method_args,
        }))

    def create_position(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreatePositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_position(pay,uint8,uint64)void",
            "args": method_args,
        }))

    def no_current_positions_for_this_asset(
        self,
        args: tuple[UserLeverageBoxName] | NoCurrentPositionsForThisAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "no_current_positions_for_this_asset((address,uint64))void",
            "args": method_args,
        }))

    def check_position(
        self,
        args: tuple[UserLeverageBoxName] | CheckPositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)",
            "args": method_args,
        }))

    def liquidate(
        self,
        args: tuple[UserLeverageBoxName] | LiquidateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> algokit_utils.BuiltTransactions:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        return self.app_client.create_transaction.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "liquidate((address,uint64))void",
            "args": method_args,
        }))

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        
    ) -> Transaction:
        return self.app_client.create_transaction.bare.clear_state(
            params,
            
        )


class LevySend:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    def opt_into_asset(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | OptIntoAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "opt_into_asset(uint64,pay)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def create_position(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreatePositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "create_position(pay,uint8,uint64)void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def no_current_positions_for_this_asset(
        self,
        args: tuple[UserLeverageBoxName] | NoCurrentPositionsForThisAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "no_current_positions_for_this_asset((address,uint64))void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def check_position(
        self,
        args: tuple[UserLeverageBoxName] | CheckPositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[tuple[bool, int, int, int, int]]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[tuple[bool, int, int, int, int]], parsed_response)

    def liquidate(
        self,
        args: tuple[UserLeverageBoxName] | LiquidateArgs,
        params: algokit_utils.CommonAppCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[None]:
        method_args = _parse_abi_args(args)
        params = params or algokit_utils.CommonAppCallParams()
        response = self.app_client.send.call(algokit_utils.AppClientMethodCallParams(**{
            **dataclasses.asdict(params),
            "method": "liquidate((address,uint64))void",
            "args": method_args,
        }), send_params=send_params)
        parsed_response = response
        return typing.cast(algokit_utils.SendAppTransactionResult[None], parsed_response)

    def clear_state(
        self,
        params: algokit_utils.AppClientBareCallParams | None = None,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAppTransactionResult[algokit_utils.ABIReturn]:
        return self.app_client.send.bare.clear_state(
            params,
            send_params=send_params,
        )


class GlobalStateValue(typing.TypedDict):
    """Shape of global_state state key values"""
    tinyman_router: int
    pool_logicsig_template: bytes
    liquidation_threshold: int
    scaled_base_percentage: int
    fee: int

class LevyState:
    """Methods to access state for the current Levy app"""

    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client

    @property
    def global_state(
        self
    ) -> "_GlobalState":
            """Methods to access global_state for the current app"""
            return _GlobalState(self.app_client)

    @property
    def box(
        self
    ) -> "_BoxState":
            """Methods to access box for the current app"""
            return _BoxState(self.app_client)

class _GlobalState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {}

    def get_all(self) -> GlobalStateValue:
        """Get all current keyed values from global_state state"""
        result = self.app_client.state.global_state.get_all()
        if not result:
            return typing.cast(GlobalStateValue, {})

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.global_state.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return typing.cast(GlobalStateValue, converted)

    @property
    def tinyman_router(self) -> int:
        """Get the current value of the tinyman_router key in global_state state"""
        value = self.app_client.state.global_state.get_value("tinyman_router")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def pool_logicsig_template(self) -> bytes:
        """Get the current value of the pool_logicsig_template key in global_state state"""
        value = self.app_client.state.global_state.get_value("pool_logicsig_template")
        if isinstance(value, dict) and "AVMBytes" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMBytes"], value)  # type: ignore
        return typing.cast(bytes, value)

    @property
    def liquidation_threshold(self) -> int:
        """Get the current value of the liquidation_threshold key in global_state state"""
        value = self.app_client.state.global_state.get_value("liquidation_threshold")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def scaled_base_percentage(self) -> int:
        """Get the current value of the scaled_base_percentage key in global_state state"""
        value = self.app_client.state.global_state.get_value("scaled_base_percentage")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

    @property
    def fee(self) -> int:
        """Get the current value of the fee key in global_state state"""
        value = self.app_client.state.global_state.get_value("fee")
        if isinstance(value, dict) and "AVMUint64" in self._struct_classes:
            return _init_dataclass(self._struct_classes["AVMUint64"], value)  # type: ignore
        return typing.cast(int, value)

class _BoxState:
    def __init__(self, app_client: algokit_utils.AppClient):
        self.app_client = app_client
        
        # Pre-generated mapping of value types to their struct classes
        self._struct_classes: dict[str, typing.Type[typing.Any]] = {
            "UserLeverageBoxValue": UserLeverageBoxValue
        }

    def get_all(self) -> dict[str, typing.Any]:
        """Get all current keyed values from box state"""
        result = self.app_client.state.box.get_all()
        if not result:
            return {}

        converted = {}
        for key, value in result.items():
            key_info = self.app_client.app_spec.state.keys.box.get(key)
            struct_class = self._struct_classes.get(key_info.value_type) if key_info else None
            converted[key] = (
                _init_dataclass(struct_class, value) if struct_class and isinstance(value, dict)
                else value
            )
        return converted

    @property
    def user_leveraged_positions(self) -> "_MapState[UserLeverageBoxName, UserLeverageBoxValue]":
        """Get values from the user_leveraged_positions map in box state"""
        return _MapState(
            self.app_client.state.box,
            "user_leveraged_positions",
            self._struct_classes.get("UserLeverageBoxValue")
        )

_KeyType = typing.TypeVar("_KeyType")
_ValueType = typing.TypeVar("_ValueType")

class _AppClientStateMethodsProtocol(typing.Protocol):
    def get_map(self, map_name: str) -> dict[typing.Any, typing.Any]:
        ...
    def get_map_value(self, map_name: str, key: typing.Any) -> typing.Any | None:
        ...

class _MapState(typing.Generic[_KeyType, _ValueType]):
    """Generic class for accessing state maps with strongly typed keys and values"""

    def __init__(self, state_accessor: _AppClientStateMethodsProtocol, map_name: str,
                struct_class: typing.Type[_ValueType] | None = None):
        self._state_accessor = state_accessor
        self._map_name = map_name
        self._struct_class = struct_class

    def get_map(self) -> dict[_KeyType, _ValueType]:
        """Get all current values in the map"""
        result = self._state_accessor.get_map(self._map_name)
        if self._struct_class and result:
            return {k: _init_dataclass(self._struct_class, v) if isinstance(v, dict) else v
                    for k, v in result.items()}  # type: ignore
        return typing.cast(dict[_KeyType, _ValueType], result or {})

    def get_value(self, key: _KeyType) -> _ValueType | None:
        """Get a value from the map by key"""
        key_value = dataclasses.asdict(key) if dataclasses.is_dataclass(key) else key  # type: ignore
        value = self._state_accessor.get_map_value(self._map_name, key_value)
        if value is not None and self._struct_class and isinstance(value, dict):
            return _init_dataclass(self._struct_class, value)  # type: ignore
        return typing.cast(_ValueType | None, value)


class LevyClient:
    """Client for interacting with Levy smart contract"""

    @typing.overload
    def __init__(self, app_client: algokit_utils.AppClient) -> None: ...
    
    @typing.overload
    def __init__(
        self,
        *,
        algorand: _AlgoKitAlgorandClient,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None: ...

    def __init__(
        self,
        app_client: algokit_utils.AppClient | None = None,
        *,
        algorand: _AlgoKitAlgorandClient | None = None,
        app_id: int | None = None,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> None:
        if app_client:
            self.app_client = app_client
        elif algorand and app_id:
            self.app_client = algokit_utils.AppClient(
                algokit_utils.AppClientParams(
                    algorand=algorand,
                    app_spec=APP_SPEC,
                    app_id=app_id,
                    app_name=app_name,
                    default_sender=default_sender,
                    default_signer=default_signer,
                    approval_source_map=approval_source_map,
                    clear_source_map=clear_source_map,
                )
            )
        else:
            raise ValueError("Either app_client or algorand and app_id must be provided")
    
        self.params = LevyParams(self.app_client)
        self.create_transaction = LevyCreateTransactionParams(self.app_client)
        self.send = LevySend(self.app_client)
        self.state = LevyState(self.app_client)

    @staticmethod
    def from_creator_and_name(
        creator_address: str,
        app_name: str,
        algorand: _AlgoKitAlgorandClient,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
    ) -> "LevyClient":
        return LevyClient(
            algokit_utils.AppClient.from_creator_and_name(
                creator_address=creator_address,
                app_name=app_name,
                app_spec=APP_SPEC,
                algorand=algorand,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
                ignore_cache=ignore_cache,
                app_lookup_cache=app_lookup_cache,
            )
        )
    
    @staticmethod
    def from_network(
        algorand: _AlgoKitAlgorandClient,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LevyClient":
        return LevyClient(
            algokit_utils.AppClient.from_network(
                app_spec=APP_SPEC,
                algorand=algorand,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    @property
    def app_id(self) -> int:
        return self.app_client.app_id
    
    @property
    def app_address(self) -> str:
        return self.app_client.app_address
    
    @property
    def app_name(self) -> str:
        return self.app_client.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_client.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_client.algorand

    def clone(
        self,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> "LevyClient":
        return LevyClient(
            self.app_client.clone(
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                approval_source_map=approval_source_map,
                clear_source_map=clear_source_map,
            )
        )

    def new_group(self) -> "LevyComposer":
        return LevyComposer(self)

    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["opt_into_asset(uint64,pay)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["create_position(pay,uint8,uint64)void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["no_current_positions_for_this_asset((address,uint64))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)"],
        return_value: algokit_utils.ABIReturn | None
    ) -> tuple[bool, int, int, int, int] | None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: typing.Literal["liquidate((address,uint64))void"],
        return_value: algokit_utils.ABIReturn | None
    ) -> None: ...
    @typing.overload
    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None: ...

    def decode_return_value(
        self,
        method: str,
        return_value: algokit_utils.ABIReturn | None
    ) -> algokit_utils.ABIValue | algokit_utils.ABIStruct | None | tuple[bool, int, int, int, int]:
        """Decode ABI return value for the given method."""
        if return_value is None:
            return None
    
        arc56_method = self.app_spec.get_arc56_method(method)
        decoded = return_value.get_arc56_value(arc56_method, self.app_spec.structs)
    
        # If method returns a struct, convert the dict to appropriate dataclass
        if (arc56_method and
            arc56_method.returns and
            arc56_method.returns.struct and
            isinstance(decoded, dict)):
            struct_class = globals().get(arc56_method.returns.struct)
            if struct_class:
                return struct_class(**typing.cast(dict, decoded))
        return decoded


@dataclasses.dataclass(frozen=True)
class LevyBareCallCreateParams(algokit_utils.AppClientBareCallCreateParams):
    """Parameters for creating Levy contract with bare calls"""
    on_complete: typing.Literal[OnComplete.NoOpOC] | None = None

    def to_algokit_utils_params(self) -> algokit_utils.AppClientBareCallCreateParams:
        return algokit_utils.AppClientBareCallCreateParams(**self.__dict__)

class LevyFactory(algokit_utils.TypedAppFactoryProtocol[LevyBareCallCreateParams, None, None]):
    """Factory for deploying and managing LevyClient smart contracts"""

    def __init__(
        self,
        algorand: _AlgoKitAlgorandClient,
        *,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        version: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ):
        self.app_factory = algokit_utils.AppFactory(
            params=algokit_utils.AppFactoryParams(
                algorand=algorand,
                app_spec=APP_SPEC,
                app_name=app_name,
                default_sender=default_sender,
                default_signer=default_signer,
                version=version,
                compilation_params=compilation_params,
            )
        )
        self.params = LevyFactoryParams(self.app_factory)
        self.create_transaction = LevyFactoryCreateTransaction(self.app_factory)
        self.send = LevyFactorySend(self.app_factory)

    @property
    def app_name(self) -> str:
        return self.app_factory.app_name
    
    @property
    def app_spec(self) -> algokit_utils.Arc56Contract:
        return self.app_factory.app_spec
    
    @property
    def algorand(self) -> _AlgoKitAlgorandClient:
        return self.app_factory.algorand

    def deploy(
        self,
        *,
        on_update: algokit_utils.OnUpdate | None = None,
        on_schema_break: algokit_utils.OnSchemaBreak | None = None,
        create_params: LevyBareCallCreateParams | None = None,
        update_params: None = None,
        delete_params: None = None,
        existing_deployments: algokit_utils.ApplicationLookup | None = None,
        ignore_cache: bool = False,
        app_name: str | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
    ) -> tuple[LevyClient, algokit_utils.AppFactoryDeployResult]:
        """Deploy the application"""
        deploy_response = self.app_factory.deploy(
            on_update=on_update,
            on_schema_break=on_schema_break,
            create_params=create_params.to_algokit_utils_params() if create_params else None,
            update_params=update_params,
            delete_params=delete_params,
            existing_deployments=existing_deployments,
            ignore_cache=ignore_cache,
            app_name=app_name,
            compilation_params=compilation_params,
            send_params=send_params,
        )

        return LevyClient(deploy_response[0]), deploy_response[1]

    def get_app_client_by_creator_and_name(
        self,
        creator_address: str,
        app_name: str,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        ignore_cache: bool | None = None,
        app_lookup_cache: algokit_utils.ApplicationLookup | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LevyClient:
        """Get an app client by creator address and name"""
        return LevyClient(
            self.app_factory.get_app_client_by_creator_and_name(
                creator_address,
                app_name,
                default_sender,
                default_signer,
                ignore_cache,
                app_lookup_cache,
                approval_source_map,
                clear_source_map,
            )
        )

    def get_app_client_by_id(
        self,
        app_id: int,
        app_name: str | None = None,
        default_sender: str | None = None,
        default_signer: TransactionSigner | None = None,
        approval_source_map: SourceMap | None = None,
        clear_source_map: SourceMap | None = None,
    ) -> LevyClient:
        """Get an app client by app ID"""
        return LevyClient(
            self.app_factory.get_app_client_by_id(
                app_id,
                app_name,
                default_sender,
                default_signer,
                approval_source_map,
                clear_source_map,
            )
        )


class LevyFactoryParams:
    """Parameters for creating transactions for Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LevyFactoryCreateParams(app_factory)
        self.update = LevyFactoryUpdateParams(app_factory)
        self.delete = LevyFactoryDeleteParams(app_factory)

class LevyFactoryCreateParams:
    """Parameters for 'create' operations of Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateParams:
        """Creates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            compilation_params=compilation_params)

    def opt_into_asset(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | OptIntoAssetArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the opt_into_asset(uint64,pay)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "opt_into_asset(uint64,pay)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def create_position(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreatePositionArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the create_position(pay,uint8,uint64)void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "create_position(pay,uint8,uint64)void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def no_current_positions_for_this_asset(
        self,
        args: tuple[UserLeverageBoxName] | NoCurrentPositionsForThisAssetArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the no_current_positions_for_this_asset((address,uint64))void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "no_current_positions_for_this_asset((address,uint64))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def check_position(
        self,
        args: tuple[UserLeverageBoxName] | CheckPositionArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the check_position((address,uint64))(bool,uint64,uint64,uint64,uint64) ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

    def liquidate(
        self,
        args: tuple[UserLeverageBoxName] | LiquidateArgs,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None
    ) -> algokit_utils.AppCreateMethodCallParams:
        """Creates a new instance using the liquidate((address,uint64))void ABI method"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.create(
            algokit_utils.AppFactoryCreateMethodCallParams(
                **{
                **dataclasses.asdict(params),
                "method": "liquidate((address,uint64))void",
                "args": _parse_abi_args(args),
                }
            ),
            compilation_params=compilation_params
        )

class LevyFactoryUpdateParams:
    """Parameters for 'update' operations of Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppUpdateParams:
        """Updates an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_update(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )

class LevyFactoryDeleteParams:
    """Parameters for 'delete' operations of Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        
    ) -> algokit_utils.AppDeleteParams:
        """Deletes an instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.params.bare.deploy_delete(
            algokit_utils.AppClientBareCallParams(**dataclasses.asdict(params)),
            )


class LevyFactoryCreateTransaction:
    """Create transactions for Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LevyFactoryCreateTransactionCreate(app_factory)


class LevyFactoryCreateTransactionCreate:
    """Create new instances of Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
    ) -> Transaction:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        return self.app_factory.create_transaction.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
        )


class LevyFactorySend:
    """Send calls to Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory
        self.create = LevyFactorySendCreate(app_factory)


class LevyFactorySendCreate:
    """Send create calls to Levy contract"""

    def __init__(self, app_factory: algokit_utils.AppFactory):
        self.app_factory = app_factory

    def bare(
        self,
        *,
        params: algokit_utils.CommonAppCallCreateParams | None = None,
        send_params: algokit_utils.SendParams | None = None,
        compilation_params: algokit_utils.AppClientCompilationParams | None = None,
    ) -> tuple[LevyClient, algokit_utils.SendAppCreateTransactionResult]:
        """Creates a new instance using a bare call"""
        params = params or algokit_utils.CommonAppCallCreateParams()
        result = self.app_factory.send.bare.create(
            algokit_utils.AppFactoryCreateParams(**dataclasses.asdict(params)),
            send_params=send_params,
            compilation_params=compilation_params
        )
        return LevyClient(result[0]), result[1]


class LevyComposer:
    """Composer for creating transaction groups for Levy contract calls"""

    def __init__(self, client: "LevyClient"):
        self.client = client
        self._composer = client.algorand.new_group()
        self._result_mappers: list[typing.Callable[[algokit_utils.ABIReturn | None], object] | None] = []

    def opt_into_asset(
        self,
        args: tuple[int, algokit_utils.AppMethodCallTransactionArgument] | OptIntoAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LevyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.opt_into_asset(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "opt_into_asset(uint64,pay)void", v
            )
        )
        return self

    def create_position(
        self,
        args: tuple[algokit_utils.AppMethodCallTransactionArgument, int, int] | CreatePositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LevyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.create_position(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "create_position(pay,uint8,uint64)void", v
            )
        )
        return self

    def no_current_positions_for_this_asset(
        self,
        args: tuple[UserLeverageBoxName] | NoCurrentPositionsForThisAssetArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LevyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.no_current_positions_for_this_asset(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "no_current_positions_for_this_asset((address,uint64))void", v
            )
        )
        return self

    def check_position(
        self,
        args: tuple[UserLeverageBoxName] | CheckPositionArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LevyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.check_position(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "check_position((address,uint64))(bool,uint64,uint64,uint64,uint64)", v
            )
        )
        return self

    def liquidate(
        self,
        args: tuple[UserLeverageBoxName] | LiquidateArgs,
        params: algokit_utils.CommonAppCallParams | None = None
    ) -> "LevyComposer":
        self._composer.add_app_call_method_call(
            self.client.params.liquidate(
                args=args,
                params=params,
            )
        )
        self._result_mappers.append(
            lambda v: self.client.decode_return_value(
                "liquidate((address,uint64))void", v
            )
        )
        return self

    def clear_state(
        self,
        *,
        args: list[bytes] | None = None,
        params: algokit_utils.CommonAppCallParams | None = None,
    ) -> "LevyComposer":
        params=params or algokit_utils.CommonAppCallParams()
        self._composer.add_app_call(
            self.client.params.clear_state(
                algokit_utils.AppClientBareCallParams(
                    **{
                        **dataclasses.asdict(params),
                        "args": args
                    }
                )
            )
        )
        return self
    
    def add_transaction(
        self, txn: Transaction, signer: TransactionSigner | None = None
    ) -> "LevyComposer":
        self._composer.add_transaction(txn, signer)
        return self
    
    def composer(self) -> algokit_utils.TransactionComposer:
        return self._composer
    
    def simulate(
        self,
        allow_more_logs: bool | None = None,
        allow_empty_signatures: bool | None = None,
        allow_unnamed_resources: bool | None = None,
        extra_opcode_budget: int | None = None,
        exec_trace_config: SimulateTraceConfig | None = None,
        simulation_round: int | None = None,
        skip_signatures: bool | None = None,
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.simulate(
            allow_more_logs=allow_more_logs,
            allow_empty_signatures=allow_empty_signatures,
            allow_unnamed_resources=allow_unnamed_resources,
            extra_opcode_budget=extra_opcode_budget,
            exec_trace_config=exec_trace_config,
            simulation_round=simulation_round,
            skip_signatures=skip_signatures,
        )
    
    def send(
        self,
        send_params: algokit_utils.SendParams | None = None
    ) -> algokit_utils.SendAtomicTransactionComposerResults:
        return self._composer.send(send_params)
