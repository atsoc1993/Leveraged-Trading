{
    "name": "Levy",
    "structs": {
        "UserLeverageBoxName": [
            {
                "name": "user",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ],
        "UserLeverageBoxValue": [
            {
                "name": "algo_deposit",
                "type": "uint64"
            },
            {
                "name": "leverage",
                "type": "uint8"
            },
            {
                "name": "asset_amount",
                "type": "uint64"
            }
        ]
    },
    "methods": [
        {
            "name": "opt_into_asset",
            "args": [
                {
                    "type": "asset",
                    "name": "asset"
                },
                {
                    "type": "pay",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_position",
            "args": [
                {
                    "type": "pay",
                    "name": "algo_deposit"
                },
                {
                    "type": "uint8",
                    "name": "leverage"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_position",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "UserLeverageBoxName",
                    "name": "user_box_name"
                }
            ],
            "returns": {
                "type": "(bool,uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "liquidate",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "UserLeverageBoxName",
                    "name": "user_box_name"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "tinyman_router": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dGlueW1hbl9yb3V0ZXI="
                },
                "pool_logicsig_template": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "cG9vbF9sb2dpY3NpZ190ZW1wbGF0ZQ=="
                },
                "liquidation_threshold": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGlxdWlkYXRpb25fdGhyZXNob2xk"
                },
                "scaled_base_percentage": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c2NhbGVkX2Jhc2VfcGVyY2VudGFnZQ=="
                },
                "fee": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZmVl"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "user_leveraged_positions": {
                    "keyType": "UserLeverageBoxName",
                    "valueType": "UserLeverageBoxValue",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        682,
                        853,
                        1002
                    ],
                    "errorMessage": "Index access is out of bounds"
                },
                {
                    "pc": [
                        474
                    ],
                    "errorMessage": "Minimum 1 Algo Deposit"
                },
                {
                    "pc": [
                        269,
                        284,
                        340,
                        368
                    ],
                    "errorMessage": "OnCompletion is not NoOp"
                },
                {
                    "pc": [
                        401
                    ],
                    "errorMessage": "can only call when creating"
                },
                {
                    "pc": [
                        272,
                        287,
                        343,
                        371
                    ],
                    "errorMessage": "can only call when not creating"
                },
                {
                    "pc": [
                        979
                    ],
                    "errorMessage": "check self.fee exists"
                },
                {
                    "pc": [
                        792
                    ],
                    "errorMessage": "check self.liquidation_threshold exists"
                },
                {
                    "pc": [
                        580
                    ],
                    "errorMessage": "check self.pool_logicsig_template exists"
                },
                {
                    "pc": [
                        786
                    ],
                    "errorMessage": "check self.scaled_base_percentage exists"
                },
                {
                    "pc": [
                        489,
                        613,
                        701,
                        872
                    ],
                    "errorMessage": "check self.tinyman_router exists"
                },
                {
                    "pc": [
                        665,
                        843
                    ],
                    "errorMessage": "check self.user_leveraged_positions entry exists"
                },
                {
                    "pc": [
                        353,
                        387
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDEwCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CiAEAAEIBCYIDnRpbnltYW5fcm91dGVyCAAAAAAAAAAABHN3YXALZml4ZWQtaW5wdXQWcG9vbF9sb2dpY3NpZ190ZW1wbGF0ZRVsaXF1aWRhdGlvbl90aHJlc2hvbGQWc2NhbGVkX2Jhc2VfcGVyY2VudGFnZQNmZWUxGEAAYSiBmKDuRmeAQEJvQVlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWdRQmJOUUEwQURFWUVrUXhHWUVCRWtTQkFVTT1eAScETGcnBYHYNmcnBoGQTmcnB4HoB2cxG0EApIIEBC+O3tUEcAUhVgSRuo+eBHANyfM2GgCOBABlAEkAEQACIkMxGRREMRhENhoBiAIlI0MxGRREMRhENhoBiAFngAEAIk8GVE8EFk8EFk8EFk8EFk8ETwRQTwNQTwJQTFCABBUffHVMULAjQzEZFEQxGEQxFiMJSTgQIxJENhoBNhoCiABaI0MxGRREMRhENhoBF8AwMRYjCUk4ECMSRIgADSNDMRlA/3oxGBREI0OKAgCL/zgIgaCNBhJEi/84BzIKEkQyCov+cABFAUAAELEyCov+shGyFCWyECKyAbOJigMAi/04BzIKEkSL/TgISYHAhD0PRIv+F0sBC4v/iABXIihlRIv/F7FPA7IISwKyByOyECKyAbayMEyyHCqyGiuyGimyGiKyGbIYgQayECKyAbO1OgVJFSRLAQ8kSwJPAk1LAUwJTFIxAIv/UE8CFov+UE8CUL+JigEBIicEZURJFSJLAQ8iSwJPAk2BA0sCD4EDSwNPAk1LA04CUiIoZUQWUIv/UClQgRtLAg+BG0sDTwJNTwNMTwNSUIAHUHJvZ3JhbUxQA4mKAQUxADIJEkSL/75ESSJbSU8CSSRVSU4CTgOL/1cgCIj/jYv/gSBbTwKBCVsiKGVEsUsDshRMshJLAbIRJbIQIrIBtkyyMEyyHCqyGiuyGimyGiKyGbIYgQayECKyAbO1OgVJFSRLAQ8kSwJPAk1LAUwJTFIXSU4ETgILSU4CTgMiJwZlRAsiJwVlRE8CCw5BAA4jiwGLAE8ETwRPBk8GiSKLAYsATwRPBE8GTwaJigEAgABJMQAyCRJEi/++REkiW0sBJFWL/1cgCIj+4ov/gSBbTwSBCVsiKGVEsUsDshRMshJLAbIRJbIQIrIBtkyyMEyyHCqyGiuyGimyGiKyGbIYgQayECKyAbO1OgVJFSRLAQ8kSwJPAk1LAUwJTFIXSU4DSwJPAgtJTgNLAglOAg1BAAWL/7xIiYsCiwQJSYwBIicHZUSLAwuBkE4KSYwADEEABYv/vEiJsYv/VwAgiwGLAAmyCLIHI7IQIrIBs4k=",
        "clear": "CoEBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 4,
            "minor": 10,
            "patch": 0
        }
    },
    "events": [],
    "templateVariables": {}
}