{
    "name": "Levy",
    "structs": {
        "UserLeverageBoxName": [
            {
                "name": "user",
                "type": "address"
            },
            {
                "name": "asset",
                "type": "uint64"
            }
        ],
        "UserLeverageBoxValue": [
            {
                "name": "algo_deposit",
                "type": "uint64"
            },
            {
                "name": "asset_amount",
                "type": "uint64"
            },
            {
                "name": "asset_decimals",
                "type": "uint64"
            },
            {
                "name": "leverage",
                "type": "uint8"
            }
        ]
    },
    "methods": [
        {
            "name": "opt_into_asset",
            "args": [
                {
                    "type": "uint64",
                    "name": "asset"
                },
                {
                    "type": "pay",
                    "name": "mbr_payment"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "create_position",
            "args": [
                {
                    "type": "pay",
                    "name": "algo_deposit"
                },
                {
                    "type": "uint8",
                    "name": "leverage"
                },
                {
                    "type": "uint64",
                    "name": "asset"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "no_current_positions_for_this_asset",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "UserLeverageBoxName",
                    "name": "user_box_name"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "check_position",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "UserLeverageBoxName",
                    "name": "user_box_name"
                }
            ],
            "returns": {
                "type": "(bool,uint64,uint64,uint64,uint64)"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        },
        {
            "name": "liquidate",
            "args": [
                {
                    "type": "(address,uint64)",
                    "struct": "UserLeverageBoxName",
                    "name": "user_box_name"
                }
            ],
            "returns": {
                "type": "void"
            },
            "actions": {
                "create": [],
                "call": [
                    "NoOp"
                ]
            },
            "readonly": false,
            "events": [],
            "recommendations": {}
        }
    ],
    "arcs": [
        22,
        28
    ],
    "networks": {},
    "state": {
        "schema": {
            "global": {
                "ints": 4,
                "bytes": 1
            },
            "local": {
                "ints": 0,
                "bytes": 0
            }
        },
        "keys": {
            "global": {
                "tinyman_router": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "dGlueW1hbl9yb3V0ZXI="
                },
                "pool_logicsig_template": {
                    "keyType": "AVMString",
                    "valueType": "AVMBytes",
                    "key": "cG9vbF9sb2dpY3NpZ190ZW1wbGF0ZQ=="
                },
                "liquidation_threshold": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "bGlxdWlkYXRpb25fdGhyZXNob2xk"
                },
                "scaled_base_percentage": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "c2NhbGVkX2Jhc2VfcGVyY2VudGFnZQ=="
                },
                "fee": {
                    "keyType": "AVMString",
                    "valueType": "AVMUint64",
                    "key": "ZmVl"
                }
            },
            "local": {},
            "box": {}
        },
        "maps": {
            "global": {},
            "local": {},
            "box": {
                "user_leveraged_positions": {
                    "keyType": "UserLeverageBoxName",
                    "valueType": "UserLeverageBoxValue",
                    "prefix": ""
                }
            }
        }
    },
    "bareActions": {
        "create": [
            "NoOp"
        ],
        "call": []
    },
    "sourceInfo": {
        "approval": {
            "sourceInfo": [
                {
                    "pc": [
                        379
                    ],
                    "errorMessage": "Minimum 1 Algo Deposit"
                },
                {
                    "pc": [
                        232
                    ],
                    "errorMessage": "OnCompletion must be NoOp"
                },
                {
                    "pc": [
                        286
                    ],
                    "errorMessage": "OnCompletion must be NoOp && can only call when creating"
                },
                {
                    "pc": [
                        483
                    ],
                    "errorMessage": "asset exists"
                },
                {
                    "pc": [
                        841
                    ],
                    "errorMessage": "check self.fee exists"
                },
                {
                    "pc": [
                        643
                    ],
                    "errorMessage": "check self.liquidation_threshold exists"
                },
                {
                    "pc": [
                        895
                    ],
                    "errorMessage": "check self.pool_logicsig_template exists"
                },
                {
                    "pc": [
                        637
                    ],
                    "errorMessage": "check self.scaled_base_percentage exists"
                },
                {
                    "pc": [
                        394,
                        554,
                        726,
                        928
                    ],
                    "errorMessage": "check self.tinyman_router exists"
                },
                {
                    "pc": [
                        516,
                        705
                    ],
                    "errorMessage": "check self.user_leveraged_positions entry exists"
                },
                {
                    "pc": [
                        301,
                        354
                    ],
                    "errorMessage": "transaction type is pay"
                }
            ],
            "pcOffsetMethod": "none"
        },
        "clear": {
            "sourceInfo": [],
            "pcOffsetMethod": "none"
        }
    },
    "source": {
        "approval": "",
        "clear": "I3ByYWdtYSB2ZXJzaW9uIDExCiNwcmFnbWEgdHlwZXRyYWNrIGZhbHNlCgovLyBhbGdvcHkuYXJjNC5BUkM0Q29udHJhY3QuY2xlYXJfc3RhdGVfcHJvZ3JhbSgpIC0+IHVpbnQ2NDoKbWFpbjoKICAgIHB1c2hpbnQgMSAvLyAxCiAgICByZXR1cm4K"
    },
    "byteCode": {
        "approval": "CyAEAAEIBCYIDnRpbnltYW5fcm91dGVyCAAAAAAAAAAABHN3YXALZml4ZWQtaW5wdXQWcG9vbF9sb2dpY3NpZ190ZW1wbGF0ZRVsaXF1aWRhdGlvbl90aHJlc2hvbGQWc2NhbGVkX2Jhc2VfcGVyY2VudGFnZQNmZWUxGEAAYSiBmKDuRmeAQEJvQVlBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQUFBQWdRQmJOUUEwQURFWUVrUXhHWUVCRWtTQkFVTT1eAScETGcnBYHYNmcnBoGQTmcnB4HoB2cxG0EAMjEZFEQxGESCBQQmUFzuBHAFIVYE5gzqqASRuo+eBHANyfM2GgCOBQAJAEMA2wDjAZwAMRkUMRgUEEM2GgEXSTEWIwlJOBAjEkRJOAiBoI0GEkQ4BzIKEkQyCkxwAEUBQAAQsTIKSwGyEbIUJbIQIrIBsyNDMRYjCUk4ECMSRDYaATYaAksCOAcyChJETwI4CEmBwIQ9D0RLAhdLAQtLAogB8SIoZURLBBexTwOyCEsCsgcjshAisgG2SbIwTwKyHCqyGiuyGimyGiKyGUyyGIEGshAisgGztToFSRUkSwEPJEsCTwJNSwFMCUxSMQBPBFBJvUUBFERPAxZPA3EBRBZMTwNQTFBPAlC/I0M2GgG9RQEUQzYaATEAMgkSREm+REkiW0lOA04DSYEYVUlOA04ESwFXIAiIAVpPAoEgW08CJFsiKGVEsUsDshRMshJLAbIRJbIQIrIBtkyyMEyyHCqyGiuyGimyGiKyGbIYgQayECKyAbO1OgVJFSRLAQ8kSwJPAk1LAUwJTFIXSU4DTgILSU8CIicGZUQLIicFZURPAgsOQQAjI4ABACJPAlRLAhZQSwQWUEsBFlBLAxZQgAQVH3x1TFCwI0MiQv/agABJNhoBSTEAMgkSREm+REsBVyAIiACuTwKBIFtLAiRbIihlRLFLA7IUTLISSwGyESWyECKyAbZMsjBMshwqshorshopshoishmyGIEGshAisgGztToFSRUkSwEPJEsCTwJNSwFMCUxSF0lOAksBIltPAoEYVUsBC0lOA0sBCU4CDEEABksDvEgjQ0sCSwEJSUUGIicHZURLAwuBkE4KSUUIDEEAB0sDvEhC/9yxSwNXACBLBUsHCbIIsgcjshAisgGzQv/DigEBIicEZURJFSJLAQ8iSwJPAk2BA0sCD4EDSwNPAk1LA04CUiIoZUQWUIv/UClQgRtLAg+BG0sDTwJNTwNMTwNSUIAHUHJvZ3JhbUxQA4k=",
        "clear": "C4EBQw=="
    },
    "compilerInfo": {
        "compiler": "puya",
        "compilerVersion": {
            "major": 5,
            "minor": 0,
            "patch": 1
        }
    },
    "events": [],
    "templateVariables": {}
}